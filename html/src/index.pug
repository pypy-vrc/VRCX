doctype html
html
    head
        meta(http-equiv="Content-Type" content="text/html;charset=utf-8")
        meta(http-equiv="Cache-Control" content="no-cache")
        meta(http-equiv="referrer" content="no-referrer")
        meta(http-equiv="viewport" content="width=device-width,initial-scale=1,user-scalable=no")
        title VRCX
        link(rel="dns-prefetch" href="https://fonts.gstatic.com")
        link(rel="preconnect" href="https://api.vrchat.cloud")
        link(rel="preconnect" href="https://d348imysud55la.cloudfront.net")
        link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Noto+Sans+JP|Noto+Sans+KR&display=swap")
        link(rel="stylesheet" href="app.css")
    body
        .x-app#x-app(style="display:none")
            //- login
            .x-login-container(v-show="!API.isLoggedIn")
                div(style="width:300px;margin:auto" v-loading="loginForm.loading")
                    div(style="margin:15px" v-if="Object.keys(loginForm.savedCredentials).length !== 0")
                        h2(style="font-weight:bold;text-align:center;margin:0") Saved Accounts
                        .x-friend-list(style="margin-top:10px")
                            .x-friend-item(v-for="user in loginForm.savedCredentials" :key="user.user.id")
                                .x-friend-item(@click="relogin(user.loginParmas)" style="width:202px;padding:0")
                                    .avatar
                                        img(v-if="displayProfilePicOverrideAsAvatar && user.user.profilePicOverride" v-lazy="user.user.profilePicOverride")
                                        img(v-else-if="displayVRCPlusIconsAsAvatar && user.user.userIcon" v-lazy="user.user.userIcon")
                                        img(v-else v-lazy="user.user.currentAvatarThumbnailImageUrl")
                                    .detail
                                        span.name(v-text="user.user.displayName")
                                        span.extra(v-text="user.user.username")
                                el-button(type="default" @click="deleteSavedLogin(user.user.username)" size="mini" icon="el-icon-delete" circle)
                    div(style="margin:15px")
                        h2(style="font-weight:bold;text-align:center;margin:0") Login
                        el-form(ref="loginForm" :model="loginForm" :rules="loginForm.rules" @submit.native.prevent="login()")
                            el-form-item(label="Username or Email" prop="username" required)
                                el-input(v-model="loginForm.username" name="username" placeholder="Username or Email" clearable)
                            el-form-item(label="Password" prop="password" required)
                                el-input(type="password" v-model="loginForm.password" name="password" placeholder="Password" clearable show-password)
                            el-checkbox(v-model="loginForm.saveCredentials") Save Credentials
                            el-form-item(style="margin-top:35px")
                                el-button(native-type="submit" type="primary" :loading="loginForm.loading" style="width:100%") Login
                            el-form-item
                                el-button(:loading="loginForm.loading" style="width:100%" @click="loginWithSteam()") Login with Steam
                        div(style="text-align:center;font-size:12px")
                            p &copy; 2019-2021 #[a(href="https://github.com/pypy-vrc" target="_blank") pypy] (mina#5656)
                            p VRCX is an assistant application for provide information about manage friendship. this application uses unofficial VRChat API (VRCSDK).
                            p VRCX isn't endorsed by VRChat and doesn't reflect the views or opinions of VRChat or anyone officially involved in producing or managing VRChat. VRChat is trademark of VRChat Inc. VRChat Â© VRChat Inc.
                            p pypy is not responsible for any problems caused by VRCX. Use at your own risk!
                        
            //- menu
            .x-menu-container
                //- download progress
                div(v-if="downloadInProgress" @click="showDownloadDialog" style="margin:7px;height:50px;cursor:pointer")
                    el-progress(type="circle" width="50" stroke-width="3" :percentage="downloadProgress" :format="downloadProgressText")
                            
                el-menu(ref="menu" collapse @select="selectMenu")
                    mixin menuitem(index, name, icon)
                        el-menu-item(index=index)
                            i(class=icon)
                            template(#title)
                                span= name
                    +menuitem('feed', 'Feed', 'el-icon-news')
                    +menuitem('gameLog', 'Game Log', 'el-icon-s-data')
                    +menuitem('search', 'Search', 'el-icon-search')
                    +menuitem('favorite', 'Favorite', 'el-icon-star-off')
                    +menuitem('friendLog', 'Friend Log', 'el-icon-notebook-2')
                    +menuitem('moderation', 'Moderation', 'el-icon-finished')
                    +menuitem('notification', 'Notification', 'el-icon-bell')
                    +menuitem('friendsList', 'Friends List', 'el-icon-s-management')
                    +menuitem('profile', 'Profile', 'el-icon-user')
                    +menuitem('settings', 'Settings', 'el-icon-s-tools')

            //- feed
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'feed'")
                data-tables(v-bind="feedTable")
                    template(#tool)
                        div(style="margin:0 0 10px;display:flex;align-items:center")
                            div(style="flex:none;margin-right:10px")
                                el-switch(v-model="feedTable.filters[2].value" active-color="#13ce66")
                            el-select(v-model="feedTable.filters[0].value" multiple clearable collapse-tags style="flex:1" placeholder="Filter")
                                el-option(v-once v-for="type in ['GPS', 'Online', 'Offline', 'Status', 'Avatar']" :key="type" :label="type" :value="type")
                            el-input(v-model="feedTable.filters[1].value" placeholder="Search" style="flex:none;width:150px;margin:0 10px")
                            el-button(type="default" @click="clearFeed()" icon="el-icon-delete" circle style="flex:none")
                    el-table-column(type="expand" width="20")
                        template(v-once #default="scope")
                            div(style="position:relative;font-size:14px")
                                template(v-if="scope.row.type === 'GPS'")
                                    template(v-if="scope.row.location[1]")
                                        location(:location="scope.row.location[1]")
                                        el-tag(type="info" effect="plain" size="mini" style="margin-left:5px") {{ scope.row.time | timeToText }}
                                        br
                                        span
                                            i.el-icon-right
                                    location(v-if="scope.row.location[0]" :location="scope.row.location[0]")
                                template(v-else-if="scope.row.type === 'Offline'")
                                    template(v-if="scope.row.location")
                                        location(:location="scope.row.location")
                                        el-tag(type="info" effect="plain" size="mini" style="margin-left:5px") {{ scope.row.time | timeToText }}
                                template(v-else-if="scope.row.type === 'Online'")
                                    location(v-if="scope.row.location" :location="scope.row.location")
                                template(v-else-if="scope.row.type === 'Avatar'")
                                    template(v-if="scope.row.avatar[0] === Object(scope.row.avatar[0])")
                                        //- high resolution (v2) 2020.07.12~
                                        el-popover(placement="right" width="500px" trigger="click")
                                            img.x-link(slot="reference" v-lazy="scope.row.avatar[1].currentAvatarThumbnailImageUrl" style="flex:none;width:160px;height:120px;border-radius:4px")
                                            img.x-link(v-lazy="scope.row.avatar[1].currentAvatarImageUrl" style="width:500px;height:375px" @click="showAvatarAuthorDialog(scope.row.userId, scope.row.avatar[1].currentAvatarImageUrl)")
                                        span(style="position:relative;top:-50px;margin:0 5px")
                                            i.el-icon-right
                                        el-popover(placement="right" width="500px" trigger="click")
                                            img.x-link(slot="reference" v-lazy="scope.row.avatar[0].currentAvatarThumbnailImageUrl" style="flex:none;width:160px;height:120px;border-radius:4px")
                                            img.x-link(v-lazy="scope.row.avatar[0].currentAvatarImageUrl" style="width:500px;height:375px" @click="showAvatarAuthorDialog(scope.row.userId, scope.row.avatar[0].currentAvatarImageUrl)")
                                    template(v-else)
                                        //- legacy
                                        el-popover(placement="right" width="500px" trigger="click")
                                            img.x-link(slot="reference" v-lazy="scope.row.avatar[1]" style="flex:none;width:160px;height:120px;border-radius:4px")
                                            img.x-link(v-lazy="scope.row.avatar[1]" style="width:500px;height:375px" @click="openExternalLink(scope.row.avatar[1])")
                                        span(style="position:relative;top:-50px;margin:0 5px")
                                            i.el-icon-right
                                        el-popover(placement="right" width="500px" trigger="click")
                                            img.x-link(slot="reference" v-lazy="scope.row.avatar[0]" style="flex:none;width:160px;height:120px;border-radius:4px")
                                            img.x-link(v-lazy="scope.row.avatar[0]" style="width:500px;height:375px" @click="openExternalLink(scope.row.avatar[0])")
                                template(v-else-if="scope.row.type === 'Status'")
                                    el-tooltip(placement="top")
                                        template(#content)
                                            span(v-if="scope.row.status[1].status === 'active'") Active
                                            span(v-else-if="scope.row.status[1].status === 'join me'") Join Me
                                            span(v-else-if="scope.row.status[1].status === 'ask me'") Ask Me
                                            span(v-else-if="scope.row.status[1].status === 'busy'") Do Not Disturb
                                            span(v-else) Offline
                                        i.x-user-status(:class="userStatusClass(scope.row.status[1])")
                                    span(v-text="scope.row.status[1].statusDescription")
                                    br
                                    span
                                        i.el-icon-right
                                    el-tooltip(placement="top")
                                        template(#content)
                                            span(v-if="scope.row.status[0].status === 'active'") Active
                                            span(v-else-if="scope.row.status[0].status === 'join me'") Join Me
                                            span(v-else-if="scope.row.status[0].status === 'ask me'") Ask Me
                                            span(v-else-if="scope.row.status[0].status === 'busy'") Do Not Disturb
                                            span(v-else) Offline
                                        i.x-user-status(:class="userStatusClass(scope.row.status[0])")
                                    span(v-text="scope.row.status[0].statusDescription")
                    el-table-column(label="Date" prop="created_at" sortable="custom" width="90")
                        template(v-once #default="scope")
                            el-tooltip(placement="right")
                                template(#content)
                                    span {{ scope.row.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                                span {{ scope.row.created_at | formatDate('MM-DD HH24:MI') }}
                    el-table-column(label="Type" prop="type" width="70")
                    el-table-column(label="User" prop="displayName" width="180")
                        template(v-once #default="scope")
                            span.x-link(v-text="scope.row.displayName" @click="showUserDialog(scope.row.userId)")
                    el-table-column(label="Detail")
                        template(v-once #default="scope")
                            template(v-if="scope.row.type === 'GPS'")
                                location(v-if="scope.row.location[0]" :location="scope.row.location[0]")
                            template(v-else-if="scope.row.type === 'Offline' || scope.row.type === 'Online'")
                                location(v-if="scope.row.location" :location="scope.row.location")
                            template(v-else-if="scope.row.type === 'Status'")
                                el-tooltip(placement="top")
                                    template(#content)
                                        span(v-if="scope.row.status[0].status === 'active'") Online
                                        span(v-else-if="scope.row.status[0].status === 'join me'") Join Me
                                        span(v-else-if="scope.row.status[0].status === 'ask me'") Ask Me
                                        span(v-else-if="scope.row.status[0].status === 'busy'") Do Not Disturb
                                        span(v-else) Offline
                                    i.x-user-status(:class="userStatusClass(scope.row.status[0])")
                                span(v-text="scope.row.status[0].statusDescription")

            //- gameLog
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'gameLog'")
                data-tables(v-bind="gameLogTable")
                    template(#tool)
                        div(style="margin:0 0 10px;display:flex;align-items:center")
                            el-select(v-model="gameLogTable.filters[0].value" multiple clearable collapse-tags style="flex:1" placeholder="Filter")
                                el-option(v-once v-for="type in ['Location', 'OnPlayerJoined', 'OnPlayerLeft', 'Notification', 'PortalSpawn', 'Event', 'VideoPlay']" :key="type" :label="type" :value="type")
                            el-input(v-model="gameLogTable.filters[1].value" placeholder="Search" style="flex:none;width:150px;margin:0 10px")
                            el-button(type="default" @click="resetGameLog()" icon="el-icon-refresh" circle style="flex:none")
                    el-table-column(label="Date" prop="created_at" sortable="custom" width="90")
                        template(v-once #default="scope")
                            el-tooltip(placement="right")
                                template(#content)
                                    span {{ scope.row.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                                span {{ scope.row.created_at | formatDate('MM-DD HH24:MI') }}
                    el-table-column(label="Type" prop="type" width="120")
                    el-table-column(label="Detail" prop="data")
                        template(v-once #default="scope")
                            location(v-if="scope.row.type === 'Location'" :location="scope.row.data[0]" :hint="scope.row.data[1]")
                            template(v-else-if="scope.row.type === 'Event'")
                                span(v-text="scope.row.data")
                            template(v-else-if="scope.row.type === 'VideoPlay'")
                                span.x-link(v-text="scope.row.data" @click="openExternalLink(scope.row.data)")
                                template(v-if="scope.row.displayName")
                                    span.x-link(@click="lookupUser(scope.row.displayName)")  ({{ scope.row.displayName }})
                            template(v-else-if="scope.row.type === 'Notification'")
                            span.x-link(v-else v-text="scope.row.data" @click="lookupUser(scope.row.data)")

            //- search
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'search'")
                div(style="margin:0 0 10px;display:flex;align-items:center")
                    el-input(v-model="searchText" clearable placeholder="Search" @keyup.native.13="search()" style="flex:1")
                    el-button(type="default" @click="clearSearch()" icon="el-icon-delete" circle style="flex:none;margin-left:10px")
                el-tabs(ref="searchTab" type="card" style="margin-top:15px")
                    el-tab-pane(label="User" v-loading="isSearchUserLoading" style="min-height:60px")
                        .x-friend-list
                            .x-friend-item(v-for="user in searchUserResults" :key="user.id" @click="showUserDialog(user.id)")
                                template(v-once)
                                    .avatar
                                        img(v-if="user.userIcon" v-lazy="user.userIcon")
                                        img(v-lazy="user.currentAvatarThumbnailImageUrl")
                                    .detail
                                        span.name(v-text="user.displayName" :class="user.trustClass")
                                        span.extra(v-text="user.username" style="font-family:monospace")
                        el-button-group(style="margin-top:15px")
                            el-button(v-if="searchUserParams.offset" @click="moreSearchUser(-1)" icon="el-icon-back" size="small") Prev
                            el-button(v-if="searchUserResults.length" @click="moreSearchUser(1)" icon="el-icon-right" size="small") Next
                    el-tab-pane(label="World" v-loading="isSearchWorldLoading" style="min-height:60px")
                        el-dropdown(@command="(row) => searchWorld(row)" size="small" trigger="click" style="margin-bottom:15px")
                            el-button(size="small") Search by Category #[i.el-icon-arrow-down.el-icon--right]
                            el-dropdown-menu(#default="dropdown")
                                el-dropdown-item(v-for="row in API.cachedConfig.dynamicWorldRows" :key="row.index" v-text="row.name" :command="row")
                        el-checkbox(v-model="searchWorldLabs" style="margin-left:10px") Include community labs
                        .x-friend-list
                            .x-friend-item(v-for="world in searchWorldResults" :key="world.id" @click="showWorldDialog(world.id)")
                                template(v-once)
                                    .avatar
                                        img(v-lazy="world.thumbnailImageUrl")
                                    .detail
                                        span.name(v-text="world.name")
                                        span.extra(v-if="world.occupants") {{ world.authorName }} ({{ world.occupants }})
                                        span.extra(v-else v-text="world.authorName")
                        el-button-group(style="margin-top:15px")
                            el-button(v-if="searchWorldParams.offset" @click="moreSearchWorld(-1)" icon="el-icon-back" size="small") Prev
                            el-button(v-if="searchWorldResults.length" @click="moreSearchWorld(1)" icon="el-icon-right" size="small") Next
                    el-tab-pane(label="Avatar" v-loading="isSearchAvatarLoading" style="min-height:60px")
                        el-dropdown(@command="(command) => searchAvatar(command)" size="small" trigger="click" style="margin-bottom:15px")
                            el-button(size="small") Search by Category #[i.el-icon-arrow-down.el-icon--right]
                            el-dropdown-menu(#default="dropdown")
                                el-dropdown-item(command="updated") Updated Recently
                                el-dropdown-item(command="created") New
                                el-dropdown-item(command="mine") Mine
                        span(style="margin-left:10px;font-size:12px;color:#909399") Avatar search is not possible.
                        .x-friend-list
                            .x-friend-item(v-for="avatar in searchAvatarResults" :key="avatar.id" @click="showAvatarDialog(avatar.id)")
                                template(v-once)
                                    .avatar
                                        img(v-lazy="avatar.thumbnailImageUrl")
                                    .detail
                                        span.name(v-text="avatar.name")
                                        span.extra(v-text="avatar.authorName")
                        el-button-group(style="margin-top:15px")
                            el-button(v-if="searchAvatarParams.offset" @click="moreSearchAvatar(-1)" icon="el-icon-back" size="small") Prev
                            el-button(v-if="searchAvatarResults.length" @click="moreSearchAvatar(1)" icon="el-icon-right" size="small") Next

            //- favorite
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'favorite'" v-if="$refs.menu && $refs.menu.activeIndex === 'favorite'")
                el-button(type="default" :loading="API.isFavoriteLoading" @click="API.refreshFavorites()" size="small" icon="el-icon-refresh" circle style="position:relative;float:right;z-index:1")
                el-tabs(type="card" v-loading="API.isFavoriteLoading")
                    el-tab-pane(label="Friends")
                        el-collapse(style="border:0")
                            el-collapse-item(v-for="group in API.favoriteFriendGroups" :key="group.name")
                                template(slot="title")
                                    span(v-text="group.displayName" style="font-weight:bold;font-size:14px;margin-left:10px")
                                    span(style="color:#909399;font-size:12px;margin-left:10px") {{ group.count }}/{{ group.capacity }}
                                    el-tooltip(placement="top")
                                        template(#content)
                                            span Rename
                                        el-button(@click.stop="changeFavoriteGroupName(group)" size="mini" icon="el-icon-edit" circle style="margin-left:10px")
                                    el-tooltip(placement="right")
                                        template(#content)
                                            span Clear
                                        el-button(@click.stop="clearFavoriteGroup(group)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                .x-friend-list(v-if="group.count" style="margin-top:10px")
                                    div(style="display:inline-block;width:300px;margin-right:15px" v-for="favorite in favoriteFriends" v-if="favorite.groupKey === group.key" :key="favorite.id" @click="showUserDialog(favorite.id)")
                                        .x-friend-item
                                            template(v-if="favorite.ref")
                                                .avatar(:class="userStatusClass(favorite.ref)")
                                                    img(v-if="displayProfilePicOverrideAsAvatar && favorite.ref.profilePicOverride" v-lazy="favorite.ref.profilePicOverride")
                                                    img(v-else-if="displayVRCPlusIconsAsAvatar && favorite.ref.userIcon" v-lazy="favorite.ref.userIcon")
                                                    img(v-else v-lazy="favorite.ref.currentAvatarThumbnailImageUrl")
                                                .detail
                                                    span.name(v-text="favorite.ref.displayName" :class="favorite.ref.$trustClass")
                                                    location.extra(v-if="favorite.ref.location !== 'offline'" :location="favorite.ref.location" :link="false")
                                                    span(v-else v-text="favorite.ref.statusDescription")
                                                el-tooltip(placement="left")
                                                    template(#content)
                                                        span Move
                                                    el-dropdown(trigger="click" @click.native.stop size="mini" style="margin-left:5px")
                                                        el-button(type="default" icon="el-icon-back" size="mini" circle)
                                                        el-dropdown-menu(#default="dropdown")
                                                            template(v-if="groupAPI.name !== group.name" v-for="groupAPI in API.favoriteFriendGroups" :key="groupAPI.name")
                                                                el-dropdown-item(style="display:block;margin:10px 0" @click.native="moveFavorite(favorite.ref, groupAPI, 'friend')" :disabled="groupAPI.count >= groupAPI.capacity") {{ groupAPI.displayName }} ({{ groupAPI.count }} / {{ groupAPI.capacity }})
                                                el-tooltip(placement="right")
                                                    template(#content)
                                                        span Unfavorite
                                                    el-button(@click.stop="deleteFavorite(favorite.id)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                            template(v-else)
                                                span(v-text="favorite.name || favorite.id")
                                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="deleteFavorite(favorite.id)" style="margin-left:5px")
                    el-tab-pane(label="Worlds")
                        el-collapse(style="border:0")
                            el-collapse-item(v-for="group in API.favoriteWorldGroups" :key="group.name")
                                template(slot="title")
                                    span(v-text="group.displayName" style="font-weight:bold;font-size:14px;margin-left:10px")
                                    i.x-user-status(style="margin-left:5px" :class="userFavoriteWorldsStatus(group.visibility)")
                                    span(style="color:#909399;font-size:12px;margin-left:10px") {{ group.count }}/{{ group.capacity }}
                                    el-tooltip(placement="top")
                                        template(#content)
                                            span Change visibility
                                        el-dropdown(trigger="click" @click.native.stop size="mini" style="margin-left:10px")
                                            el-button(type="default" icon="el-icon-view" size="mini" circle)
                                            el-dropdown-menu(#default="dropdown")
                                                el-dropdown-item(v-if="group.visibility !== visibility" v-for="visibility in worldGroupVisibilityOptions" :key="visibility" style="display:block;margin:10px 0" v-text="visibility" @click.native="changeWorldGroupVisibility(group.name, visibility)")
                                    el-tooltip(placement="top")
                                        template(#content)
                                            span Rename
                                        el-button(@click.stop="changeFavoriteGroupName(group)" size="mini" icon="el-icon-edit" circle style="margin-left:5px")
                                    el-tooltip(placement="right")
                                        template(#content)
                                            span Clear
                                        el-button(@click.stop="clearFavoriteGroup(group)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                .x-friend-list(v-if="group.count" style="margin-top:10px")
                                    div(style="display:inline-block;width:300px;margin-right:15px" v-for="favorite in favoriteWorlds" v-if="favorite.groupKey === group.key" :key="favorite.id" @click="showWorldDialog(favorite.id)")
                                        .x-friend-item
                                            template(v-if="favorite.ref")
                                                .avatar
                                                    img(v-lazy="favorite.ref.thumbnailImageUrl")
                                                .detail
                                                    span.name(v-text="favorite.ref.name")
                                                    span.extra(v-if="favorite.ref.occupants") {{ favorite.ref.authorName }} ({{ favorite.ref.occupants }})
                                                    span.extra(v-else v-text="favorite.ref.authorName")
                                                el-tooltip(placement="left")
                                                    template(#content)
                                                        span Move
                                                    el-dropdown(trigger="click" @click.native.stop size="mini" style="margin-left:5px")
                                                        el-button(type="default" icon="el-icon-back" size="mini" circle)
                                                        el-dropdown-menu(#default="dropdown")
                                                            template(v-if="groupAPI.name !== group.name" v-for="groupAPI in API.favoriteWorldGroups" :key="groupAPI.name")
                                                                el-dropdown-item(style="display:block;margin:10px 0" @click.native="moveFavorite(favorite.ref, groupAPI, 'world')" :disabled="groupAPI.count >= groupAPI.capacity") {{ groupAPI.displayName }} ({{ groupAPI.count }} / {{ groupAPI.capacity }})
                                                el-tooltip(placement="right")
                                                    template(#content)
                                                        span Unfavorite
                                                    el-button(@click.stop="deleteFavorite(favorite.id)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                            template(v-else)
                                                span(v-text="favorite.name || favorite.id")
                                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="deleteFavorite(favorite.id)" style="margin-left:5px")
                    el-tab-pane(label="Avatars")
                        el-tooltip(placement="top")
                            template(#content)
                                span Add favorite
                            el-button(style="margin-left:5px" icon="el-icon-plus" size="small" @click="promptAddAvatarFavoriteDialog" circle)
                        el-collapse(style="border:0")
                            el-collapse-item(v-for="group in API.favoriteAvatarGroups" :key="group.name")
                                template(slot="title")
                                    span(v-text="group.displayName" style="font-weight:bold;font-size:14px;margin-left:10px")
                                    span(style="color:#909399;font-size:12px;margin-left:10px") {{ group.count }}/{{ group.capacity }}
                                    el-tooltip(placement="right")
                                        template(#content)
                                            span Clear
                                        el-button(@click.stop="clearFavoriteGroup(group)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                .x-friend-list(v-if="group.count" style="margin-top:10px")
                                    div(style="display:inline-block;width:300px;margin-right:15px" v-for="favorite in favoriteAvatars" v-if="favorite.groupKey === group.key" :key="favorite.id" @click="showAvatarDialog(favorite.id)")
                                        .x-friend-item
                                            template(v-if="favorite.ref")
                                                .avatar
                                                    img(v-lazy="favorite.ref.thumbnailImageUrl")
                                                .detail
                                                    span.name(v-text="favorite.ref.name")
                                                    span.extra(v-text="favorite.ref.authorName")
                                                el-tooltip(placement="left")
                                                    template(#content)
                                                        span Move
                                                    el-dropdown(trigger="click" @click.native.stop size="mini" style="margin-left:5px")
                                                        el-button(type="default" icon="el-icon-back" size="mini" circle)
                                                        el-dropdown-menu(#default="dropdown")
                                                            template(v-if="groupAPI.name !== group.name" v-for="groupAPI in API.favoriteAvatarGroups" :key="groupAPI.name")
                                                                el-dropdown-item(style="display:block;margin:10px 0" @click.native="moveFavorite(favorite.ref, groupAPI, 'avatar')" :disabled="groupAPI.count >= groupAPI.capacity") {{ groupAPI.displayName }} ({{ groupAPI.count }} / {{ groupAPI.capacity }})
                                                el-tooltip(placement="right")
                                                    template(#content)
                                                        span Unfavorite
                                                    el-button(@click.stop="deleteFavorite(favorite.id)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                                            template(v-else)
                                                .detail
                                                    span.name(v-text="favorite.name || favorite.id")
                                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="deleteFavorite(favorite.id)" style="margin-left:5px")

            //- friendLog
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'friendLog'")
                data-tables(v-bind="friendLogTable")
                    template(#tool)
                        div(style="margin:0 0 10px;display:flex;align-items:center")
                            el-select(v-model="friendLogTable.filters[0].value" multiple clearable collapse-tags style="flex:1" placeholder="Filter")
                                el-option(v-once v-for="type in ['Friend', 'Unfriend', 'FriendRequest', 'CancelFriendRequest', 'DisplayName', 'TrustLevel']" :key="type" :label="type" :value="type")
                            el-input(v-model="friendLogTable.filters[1].value" placeholder="Search" style="flex:none;width:150px;margin-left:10px")
                    el-table-column(label="Date" prop="created_at" sortable="custom" width="100")
                        template(v-once #default="scope")
                            el-tooltip(placement="right")
                                template(#content)
                                    span {{ scope.row.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                                span {{ scope.row.created_at | formatDate('MM-DD HH24:MI') }}
                    el-table-column(label="Type" prop="type" width="150")
                    el-table-column(label="User" prop="displayName")
                        template(v-once #default="scope")
                            span(v-if="scope.row.type === 'DisplayName'") {{ scope.row.previousDisplayName }} #[i.el-icon-right]
                            | &nbsp;
                            span.x-link(v-text="scope.row.displayName || scope.row.userId" @click="showUserDialog(scope.row.userId)")
                            template(v-if="scope.row.type === 'TrustLevel'")
                                br
                                span ({{ scope.row.previousTrustLevel }} #[i.el-icon-right] {{ scope.row.trustLevel }})
                    el-table-column(label="Action" width="80" align="right")
                        template(v-once #default="scope")
                            el-button(type="text" icon="el-icon-close" size="mini" @click="deleteFriendLog(scope.row)")

            //- moderation
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'moderation'")
                data-tables(v-bind="playerModerationTable" v-loading="API.isPlayerModerationsLoading")
                    template(#tool)
                        div(style="margin:0 0 10px;display:flex;align-items:center")
                            el-select(v-model="playerModerationTable.filters[0].value" multiple clearable collapse-tags style="flex:1" placeholder="Filter")
                                el-option(v-once v-for="type in ['block', 'mute', 'unmute', 'hideAvatar', 'showAvatar']" :key="type" :label="type" :value="type")
                            el-input(v-model="playerModerationTable.filters[1].value" placeholder="Search" style="flex:none;width:150px;margin:0 10px")
                            el-button(type="default" :loading="API.isPlayerModerationsLoading" @click="API.refreshPlayerModerations()" icon="el-icon-refresh" circle style="flex:none")
                    el-table-column(label="Date" prop="created" sortable="custom" width="100")
                        template(v-once #default="scope")
                            el-tooltip(placement="right")
                                template(#content)
                                    span {{ scope.row.created | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                                span {{ scope.row.created | formatDate('MM-DD HH24:MI') }}
                    el-table-column(label="Type" prop="type" width="100")
                    el-table-column(label="Source" prop="sourceDisplayName")
                        template(v-once #default="scope")
                            span.x-link(v-text="scope.row.sourceDisplayName" @click="showUserDialog(scope.row.sourceUserId)")
                    el-table-column(label="Target" prop="targetDisplayName")
                        template(v-once #default="scope")
                            span.x-link(v-text="scope.row.targetDisplayName" @click="showUserDialog(scope.row.targetUserId)")
                    el-table-column(label="Action" width="80" align="right")
                        template(v-once #default="scope")
                            el-button(v-if="scope.row.sourceUserId === API.currentUser.id" type="text" icon="el-icon-close" size="mini" @click="deletePlayerModeration(scope.row)")

            //- notification
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'notification'" v-loading="API.isNotificationsLoading")
                data-tables(v-bind="notificationTable")
                    template(#tool)
                        div(style="margin:0 0 10px;display:flex;align-items:center")
                            el-select(v-model="notificationTable.filters[0].value" multiple clearable collapse-tags style="flex:1" placeholder="Filter")
                                el-option(v-once v-for="type in ['requestInvite', 'invite', 'requestInviteResponse', 'inviteResponse', 'friendRequest', 'message']" :key="type" :label="type" :value="type")
                            el-input(v-model="notificationTable.filters[1].value" placeholder="Search" style="flex:none;width:150px;margin:0 10px")
                            el-button(type="default" :loading="API.isNotificationsLoading" @click="API.refreshNotifications()" icon="el-icon-refresh" circle style="flex:none")
                    el-table-column(label="Date" prop="created_at" sortable="custom" width="100")
                        template(v-once #default="scope")
                            el-tooltip(placement="right")
                                template(#content)
                                    span {{ scope.row.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                                span {{ scope.row.created_at | formatDate('MM-DD HH24:MI') }}
                    el-table-column(label="Type" prop="type" width="150")
                        template(v-once #default="scope")
                            el-tooltip(placement="top" v-if="scope.row.type === 'invite'")
                                template(#content)
                                    span(v-text="API.parseInviteLocation(scope.row)")
                                span.x-link(v-text="scope.row.type" @click="showWorldDialog(scope.row.details.worldId)")
                            span(v-else v-text="scope.row.type")
                    el-table-column(label="User" prop="senderUsername" width="150")
                        template(v-once #default="scope")
                            span.x-link(v-text="scope.row.senderUsername" @click="showUserDialog(scope.row.senderUserId)")
                    el-table-column(label="Photo" width="100" prop="photo")
                        template(v-once #default="scope")
                            template(v-if="scope.row.details && scope.row.details.imageUrl")
                                el-popover(placement="right" width="500px" trigger="click")
                                    img.x-link(slot="reference" v-lazy="scope.row.details.imageUrl" style="flex:none;height:60px;border-radius:4px")
                                    img.x-link(v-lazy="scope.row.details.imageUrl" style="width:500px" @click="openExternalLink(scope.row.details.imageUrl)")
                    el-table-column(label="Message" prop="message")
                        template(v-once #default="scope")
                            span(v-if="scope.row.message" v-text="scope.row.message")
                            span(v-else-if='scope.row.details.inviteMessage' v-text="scope.row.details.inviteMessage")
                            span(v-else-if='scope.row.details.requestMessage' v-text="scope.row.details.requestMessage")
                            span(v-else-if='scope.row.details.responseMessage' v-text="scope.row.details.responseMessage")
                    el-table-column(label="Action" width="80" align="right")
                        template(v-once #default="scope")
                            template(v-if="scope.row.senderUserId !== API.currentUser.id")
                                el-button(v-if="scope.row.type === 'friendRequest'" type="text" icon="el-icon-check" size="mini" @click="acceptNotification(scope.row)")
                                el-button(v-else-if="scope.row.type === 'invite'" type="text" icon="el-icon-chat-line-square" size="mini" @click="showSendInviteResponseDialog(scope.row)")
                                el-button(v-else-if="scope.row.type === 'requestInvite'" type="text" icon="el-icon-chat-line-square" size="mini" @click="showSendInviteRequestResponseDialog(scope.row)")
                                el-button(type="text" icon="el-icon-close" size="mini" @click="hideNotification(scope.row)")

            //- profile
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'profile'")
                div.options-container(style="margin-top:0")
                    span.header Profile
                    .x-friend-list(style="margin-top:10px")
                        .x-friend-item(@click="showUserDialog(API.currentUser.id)")
                            .avatar
                                img(v-if="displayProfilePicOverrideAsAvatar && API.currentUser.profilePicOverride" v-lazy="API.currentUser.profilePicOverride")
                                img(v-else-if="displayVRCPlusIconsAsAvatar && API.currentUser.userIcon" v-lazy="API.currentUser.userIcon")
                                img(v-else v-lazy="API.currentUser.currentAvatarThumbnailImageUrl")
                            .detail
                                span.name(v-text="API.currentUser.displayName")
                                span.extra(v-text="API.currentUser.username")
                        .x-friend-item(style="cursor:default")
                            .detail
                                span.name Last Login
                                span.extra {{ API.currentUser.last_login | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                        .x-friend-item(style="cursor:default")
                            .detail
                                span.name Two-Factor Auth (2FA)
                                span.extra {{ API.currentUser.twoFactorAuthEnabled ? 'Enabled' : 'Disabled' }}
                    div(style="margin-top:10px")
                        el-button(size="small" icon="el-icon-switch-button" @click="logout()") Logout
                        el-button(size="small" icon="el-icon-printer" @click="showExportFriendsListDialog()") Export Friends List
                        el-button(size="small" icon="el-icon-user" @click="showExportAvatarsListDialog()") Export Own Avatars
                        el-button(size="small" icon="el-icon-chat-dot-round" @click="showDiscordNamesDialog()") Discord Names
                div.options-container
                    span.header Game Info
                    .x-friend-list(style="margin-top:10px")
                        .x-friend-item
                            .detail(@click="API.getVisits()")
                                span.name Online Users
                                span.extra(v-if="visits") {{visits}} users online.
                                span.extra(v-else) Click to refresh
                div.options-container
                    span.header Direct Access
                    div(style="margin-top:10px")
                        el-button-group
                            el-button(size="small" @click="promptUserDialog()") User
                            el-button(size="small" @click="promptWorldDialog()") World/Instance
                            el-button(size="small" @click="promptAddAvatarFavoriteDialog()") Avatar
                div.options-container
                    span.header Invite Messages
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="inviteMessageTable.visible = true; refreshInviteMessageTable('message')" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="inviteMessageTable.visible = false" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    data-tables(v-if="inviteMessageTable.visible" v-bind="inviteMessageTable" style="margin-top:10px")
                        el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                        el-table-column(label="Message" prop="message")
                        el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                            template(v-once #default="scope")
                                countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                        el-table-column(label="Action" width="60" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditInviteMessageDialog('message', scope.row)")
                div.options-container
                    span.header Invite Response Messages
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="inviteResponseMessageTable.visible = true; refreshInviteMessageTable('response')" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="inviteResponseMessageTable.visible = false" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    data-tables(v-if="inviteResponseMessageTable.visible" v-bind="inviteResponseMessageTable" style="margin-top:10px")
                        el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                        el-table-column(label="Message" prop="message")
                        el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                            template(v-once #default="scope")
                                countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                        el-table-column(label="Action" width="60" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditInviteMessageDialog('response', scope.row)")
                div.options-container
                    span.header Invite Request Messages
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="inviteRequestMessageTable.visible = true; refreshInviteMessageTable('request')" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="inviteRequestMessageTable.visible = false" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    data-tables(v-if="inviteRequestMessageTable.visible" v-bind="inviteRequestMessageTable" style="margin-top:10px")
                        el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                        el-table-column(label="Message" prop="message")
                        el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                            template(v-once #default="scope")
                                countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                        el-table-column(label="Action" width="60" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditInviteMessageDialog('request', scope.row)")
                div.options-container
                    span.header Invite Request Response Messages
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="inviteRequestResponseMessageTable.visible = true; refreshInviteMessageTable('requestResponse')" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="inviteRequestResponseMessageTable.visible = false" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    data-tables(v-if="inviteRequestResponseMessageTable.visible" v-bind="inviteRequestResponseMessageTable" style="margin-top:10px")
                        el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                        el-table-column(label="Message" prop="message")
                        el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                            template(v-once #default="scope")
                                countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                        el-table-column(label="Action" width="60" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditInviteMessageDialog('requestResponse', scope.row)")
                div.options-container
                    span.header Past Display Names
                    data-tables(v-bind="pastDisplayNameTable" style="margin-top:10px")
                        el-table-column(label="Date" prop="updated_at" sortable="custom")
                            template(v-once #default="scope")
                                span {{ scope.row.updated_at | formatDate('YYYY-MM-DD HH24:MI:SS') }}
                        el-table-column(label="Name" prop="displayName")
                div.options-container
                    span.header Config JSON
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="refreshConfigTreeData()" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="configTreeData = []" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    el-tree(v-if="configTreeData.length > 0" :data="configTreeData" style="margin-top:10px;font-size:12px")
                        template(#default="scope")
                            span
                                span(v-text="scope.data.key" style="font-weight:bold;margin-right:5px")
                                span(v-if="!scope.data.children" v-text="scope.data.value")
                div.options-container
                    span.header Current User JSON
                    el-tooltip(placement="top")
                        template(#content)
                            span Refresh
                        el-button(type="default" @click="refreshCurrentUserTreeData()" size="mini" icon="el-icon-refresh" circle style="margin-left:5px")
                    el-tooltip(placement="top")
                        template(#content)
                            span Clear results
                        el-button(type="default" @click="currentUserTreeData = []" size="mini" icon="el-icon-delete" circle style="margin-left:0")
                    el-tree(v-if="currentUserTreeData.length > 0" :data="currentUserTreeData" style="margin-top:10px;font-size:12px")
                        template(#default="scope")
                            span
                                span(v-text="scope.data.key" style="font-weight:bold;margin-right:5px")
                                span(v-if="!scope.data.children" v-text="scope.data.value")

            //- friends list
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'friendsList'" v-if="$refs.menu && $refs.menu.activeIndex === 'friendsList'")
                div.options-container(style="margin-top:0")
                    span.header Friends List
                    div(style="float:right;font-size:13px")
                        span Load missing entries, spams API use at your own risk:
                        template(v-if="friendsListLoading")
                            span(v-text="friendsListLoadingProgress" style="margin-left:5px")
                            el-tooltip(placement="top")
                                template(#content)
                                    span Cancel
                                el-button(@click="friendsListLoading = false" size="mini" icon="el-icon-loading" circle style="margin-left:5px")
                        template(v-else)
                            el-tooltip(placement="top")
                                template(#content)
                                    span Load
                                el-button(@click="friendsListLoadUsers" size="mini" icon="el-icon-refresh-left" circle style="margin-left:5px")
                    div(style="margin:10px 0 0 10px;display:flex;align-items:center")
                        div(style="flex:none;margin-right:10px")
                            el-switch(v-model="friendsListSearchFilterVIP" @change="friendsListSearchChange" active-color="#13ce66")
                        el-input(v-model="friendsListSearch" placeholder="Search" @change="friendsListSearchChange" clearable style="flex:1")
                        el-select(v-model="friendsListSearchFilters" multiple clearable collapse-tags style="flex:none;width:200px;margin:0 10px" @change="friendsListSearchChange" placeholder="Filter")
                            el-option(v-once v-for="type in ['Display Name', 'User Name', 'Rank', 'Status', 'Bio', 'Memo']" :key="type" :label="type" :value="type")
                        el-tooltip(placement="top")
                            template(#content)
                                span Refresh
                            el-button(type="default" @click="friendsListSearchChange" icon="el-icon-refresh" circle style="flex:none")
                        el-tooltip(placement="top")
                            template(#content)
                                span Clear results
                            el-button(type="default" @click="friendsListTable.data = []" icon="el-icon-delete" circle style="flex:none;margin-left:5px")
                    data-tables(v-bind="friendsListTable" @row-click="selectFriendsListRow" style="margin-top:10px;cursor:pointer")
                        el-table-column(label="No." width="70" prop="$friendNum" sortable="custom")
                        el-table-column(label="Avatar" width="70" prop="photo")
                            template(v-once #default="scope")
                                el-popover(v-if="displayProfilePicOverrideAsAvatar && scope.row.profilePicOverride" placement="right" height="500px" trigger="hover")
                                    img.friends-list-avatar(slot="reference" v-lazy="scope.row.profilePicOverride")
                                    img.friends-list-avatar(v-lazy="scope.row.profilePicOverride" style="height:500px;cursor:pointer" @click="openExternalLink(scope.row.profilePicOverride)")
                                el-popover(v-else-if="displayVRCPlusIconsAsAvatar && scope.row.userIcon" placement="right" height="500px" trigger="hover")
                                    img.friends-list-avatar(slot="reference" v-lazy="scope.row.userIcon")
                                    img.friends-list-avatar(v-lazy="scope.row.userIcon" style="height:500px;cursor:pointer" @click="openExternalLink(scope.row.userIcon)")
                                el-popover(v-else placement="right" height="500px" trigger="hover")
                                    img.friends-list-avatar(slot="reference" v-lazy="scope.row.currentAvatarThumbnailImageUrl")
                                    img.friends-list-avatar(v-lazy="scope.row.currentAvatarImageUrl" style="height:500px;cursor:pointer" @click="openExternalLink(scope.row.currentAvatarImageUrl)")
                        el-table-column(label="Display Name" min-width="130" prop="displayName" sortable :sort-method="(a, b) => sortAlphabetically(a, b, 'displayName')")
                        el-table-column(label="User Name" min-width="120" prop="username" sortable :sort-method="(a, b) => sortAlphabetically(a, b, 'username')")
                        el-table-column(label="Rank" width="110" prop="$trustNum" sortable="custom")
                            template(v-once #default="scope")
                                span.name(v-text="scope.row.$trustLevel" :class="scope.row.$trustClass")
                        el-table-column(label="Status" min-width="180" prop="statusDescription" sortable :sort-method="(a, b) => sortAlphabetically(a, b, 'statusDescription')")
                        el-table-column(label="Language" width="100" prop="$languages" sortable :sort-method="(a, b) => sortLanguages(a, b)")
                            template(v-once #default="scope")
                                el-tooltip(v-for="item in scope.row.$languages" :key="item.key" placement="top")
                                    template(#content)
                                        span {{ item.value }} ({{ item.key }})
                                    span.famfamfam-flags(:class="languageClass(item.key)" style="display:inline-block;margin-left:5px")
                        el-table-column(label="Bio Links" width="100" prop="bioLinks")
                            template(v-once #default="scope")
                                el-tooltip(v-if="link" v-for="(link, index) in scope.row.bioLinks" :key="index")
                                    template(#content)
                                        span(v-text="link")
                                    img(:src="getFaviconUrl(link)" style="width:16px;height:16px;vertical-align:middle;margin-right:5px;cursor:pointer" @click.stop="openExternalLink(link)")
                        el-table-column(label="Last Login" width="170" prop="last_login" sortable :sort-method="(a, b) => sortAlphabetically(a, b, 'last_login')")
                        el-table-column(label="Date Joined" width="120" prop="date_joined" sortable :sort-method="(a, b) => sortAlphabetically(a, b, 'date_joined')")
                        el-table-column(label="Unfriend" width="70" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="confirmDeleteFriend(scope.row.id)")

            //- settings
            .x-container(v-show="$refs.menu && $refs.menu.activeIndex === 'settings'")
                div.options-container(style="margin-top:0")       
                    span.header Settings
                    .x-friend-list(style="margin-top:10px")
                        .x-friend-item(style="cursor:default")
                            .detail
                                span.name Version
                                span.extra(v-text="appVersion")
                        .x-friend-item(@click="checkAppVersion()")
                            .detail
                                span.name Latest Version
                                span.extra(v-if="latestAppVersion" v-text="latestAppVersion")
                                span.extra(v-else) Click to refresh
                        .x-friend-item(@click="openExternalLink('https://github.com/pypy-vrc/VRCX')")
                            .detail
                                span.name Repository URL
                                span.extra https://github.com/pypy-vrc/VRCX
                div.options-container
                    span.header Appearance
                    div.options-container-item
                        span.name Theme mode
                        el-radio-group(v-model="themeMode" size="mini")
                            el-radio-button(label="system") System
                            el-radio-button(label="light") Light
                            el-radio-button(label="dark") Dark
                    div.options-container-item
                        span.name Profile Picture Override
                        el-switch(v-model="displayProfilePicOverrideAsAvatar")
                    div.options-container-item
                        span.name VRCPlus Profile Icons
                        el-switch(v-model="displayVRCPlusIconsAsAvatar")
                    div.options-container-item
                        span.name Use a Primary Password
                        el-switch(v-model="enablePrimaryPassword" @change="enablePrimaryPasswordChange" :disabled="!loginForm.savedCredentials[API.currentUser.username]")
                div.options-container
                    span.header Side Pannel Sorting Options
                    div.options-container-item
                        span.name Sort Private to bottom
                        el-switch(v-model="orderFriendsGroupPrivate")
                    div.options-container-item
                        span.name Sort GPS to top
                        el-switch(v-model="orderFriendsGroupGPS")
                    div.options-container-item
                        span.name VIP
                        el-switch(v-model="orderFriendsGroup0" inactive-text="by name" active-text="by state")
                    div.options-container-item
                        span.name Online
                        el-switch(v-model="orderFriendsGroup1" inactive-text="by name" active-text="by state")
                    div.options-container-item
                        span.name Active
                        el-switch(v-model="orderFriendsGroup2" inactive-text="by name" active-text="by state")
                    div.options-container-item
                        span.name Offline
                        el-switch(v-model="orderFriendsGroup3" inactive-text="by name" active-text="by state")
                    div.options-container
                        span.header Trust Rank Colors
                        div.options-container-item
                            div
                                v-swatches(v-model="trustColor.untrusted" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-untrusted")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Visitor
                            div
                                v-swatches(v-model="trustColor.basic" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-basic")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] New User
                            div
                                v-swatches(v-model="trustColor.known" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-known")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] User
                            div
                                v-swatches(v-model="trustColor.trusted" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-trusted")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Known User
                            div
                                v-swatches(v-model="trustColor.veteran" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-veteran")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Trusted User
                            div
                                v-swatches(v-model="trustColor.legend" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-legend")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Veteran User
                            div
                                v-swatches(v-model="trustColor.legendary" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-legendary")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Legendary User
                            div
                                v-swatches(v-model="trustColor.vip" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-vip")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] VRChat Team
                            div
                                v-swatches(v-model="trustColor.troll" show-fallback fallback-input-type="color" popover-x="right" :swatches="trustColorSwatches" class="x-tag-troll")
                                    span.color-picker(slot="trigger") #[i.el-icon-s-open] Nuisance
                div.options-container
                    span.header Discord Presence
                    div.options-container-item
                        span * Only works when VRChat is running.
                    div.options-container-item
                        span.name Enable
                        el-switch(v-model="discordActive")
                    div.options-container-item
                        span.name Instance details
                        el-switch(v-model="discordInstance" :disabled="!discordActive")
                div.options-container
                    span.header SteamVR Overlay
                    div.options-container-item
                        span * It runs automatically when VRChat is running.
                        br
                        br
                        span Grip: Vive or Other Controllers Grab, Oculus X/A Buttons
                        br
                        span Menu: Vive Menu, Index B, Oculus Y/B Buttons
                        br
                    div.options-container-item
                        span.name Enable
                        el-switch(v-model="openVR")
                    div.options-container-item
                        span.name Force Run (Opens SteamVR)
                        el-switch(v-model="openVRAlways" :disabled="!openVR")
                    div.options-container-item
                        span.name Hide Private Worlds
                        el-switch(v-model="hidePrivateFromFeed")
                    br
                    span.sub-header Wrist Feed
                    div.options-container-item
                        span.name Wrist Feed Overlay
                        el-switch(v-model="overlayWrist" :disabled="!openVR")
                    div.options-container-item
                        span.name(style="min-width:137px") Overlay Button
                        el-switch(v-model="overlaybutton" inactive-text="Grip" active-text="Menu" :disabled="!openVR || !overlayWrist")
                    div.options-container-item
                        span.name Minimal Feed Icons
                        el-switch(v-model="minimalFeed" :disabled="!openVR || !overlayWrist")
                    div.options-container-item
                        span.name Hide VR Devices
                        el-switch(v-model="hideDevicesFromFeed" :disabled="!openVR || !overlayWrist")
                    div.options-container-item
                        el-button(size="small" icon="el-icon-notebook-2" @click="showWristFeedFiltersDialog()" :disabled="!openVR || !overlayWrist") Wrist Feed Filters
                    br
                    span.sub-header Notifications
                    div.options-container-item
                        span.name Overlay Notifications
                        el-switch(v-model="overlayNotifications" :disabled="!openVR")
                    div.options-container-item
                        el-button(size="small" icon="el-icon-rank" @click="showNotificationPositionDialog()" :disabled="!overlayNotifications || !openVR") Notification Position
                    div.options-container-item
                        span.name XSOverlay Notifications
                        el-switch(v-model="xsNotifications")
                    div.options-container-item
                        el-button(size="small" icon="el-icon-time" @click="promptNotificationTimeout()" :disabled="(!overlayNotifications || !openVR) && !xsNotifications") Notification Timeout
                    div.options-container-item
                        span.name Desktop Notifications, When to display:
                        br
                        toggle-switch(:options="whenToPlayToggleSwitchOption" group="whenToPlayDesktopNotificationsToggleSwitchOption" v-model="desktopToast" class="toggle-switch")
                    div.options-container-item
                        el-button(size="small" icon="el-icon-chat-square" @click="showNotyFeedFiltersDialog()") Notification Filters
                    br
                    span.sub-header Text-To-Speach Options
                    div.options-container-item
                        span.name Notification TTS, When to play:
                        br
                        toggle-switch(:options="whenToPlayToggleSwitchOption" group="whenToPlayNotificationTTSToggleSwitchOption" v-model="notificationTTS" class="toggle-switch")
                    div.options-container-item
                        span.name TTS Voice
                        el-dropdown(@command="(voice) => changeTTSVoice(voice)" trigger="click" size="small")
                            el-button(v-text="TTSvoices[notificationTTSVoice].name" size="mini" :disabled="!notificationTTS")
                            el-dropdown-menu(#default="dropdown")
                                el-dropdown-item(v-if="voice" v-for="(voice, index) in TTSvoices" :key="index" v-text="voice.name" :command="index")
                div.options-container
                    span.header VRChat Cache Management
                    br
                    span.sub-header Auto Cache Worlds
                    br
                    div.options-container-item
                        span.name Download on invite:
                        br
                        toggle-switch(:options="worldCacheToggleSwitchOption" group="worldCacheInviteToggleSwitchOption" v-model="worldAutoCacheInvite" class="toggle-switch")
                    div.options-container-item
                        el-switch(v-model="worldAutoCacheInviteFilter" inactive-text="VIP" active-text="Everyone" :disabled="worldAutoCacheInvite == 'Never'")
                    div.options-container-item
                        span.name Download on GPS:
                        br
                        toggle-switch(:options="worldCacheToggleSwitchOption" group="worldCacheGPSToggleSwitchOption" v-model="worldAutoCacheGPS" class="toggle-switch")
                    div.options-container-item
                        el-switch(v-model="worldAutoCacheGPSFilter" inactive-text="VIP" active-text="Everyone" :disabled="worldAutoCacheGPS == 'Never'")
                    div.options-container-item
                        el-button-group
                            el-button(size="small" icon="el-icon-download" @click="showDownloadDialog()") Download History
                    br
                    span.sub-header Automatically Manage Cache When Closing VRChat
                    div.options-container-item
                        span.name(style="min-width:300px") Auto delete old versions from cache
                        el-switch(v-model="autoSweepVRChatCache")
                div.options-container
                    span.header Application
                    div.options-container-item
                        span.name Start at Windows startup
                        el-switch(v-model="isStartAtWindowsStartup")
                    div.options-container-item
                        span.name Start as minimized state
                        el-switch(v-model="isStartAsMinimizedState")
                    div.options-container-item
                        span.name Close to tray
                        el-switch(v-model="isCloseToTray")
                    div.options-container-item
                        span.name Auto login
                        el-switch(v-model="isAutoLogin")
                    div.options-container-item
                        el-button-group
                            el-button(size="small" icon="el-icon-s-operation" @click="showLaunchOptions()") Launch Options
                            el-button(size="small" icon="el-icon-s-operation" @click="showVRChatConfig()") VRChat config.json
                div.options-container(style="margin-top:45px;border-top:1px solid #eee;padding-top:30px")
                    span.header Legal Notice
                    div.options-container-item
                        p &copy; 2019-2021 #[a(href="https://github.com/pypy-vrc" target="_blank") pypy] (mina#5656)
                        p VRCX is an assistant application for provide information about manage friendship. this application uses unofficial VRChat API (VRCSDK).
                        p VRCX isn't endorsed by VRChat and doesn't reflect the views or opinions of VRChat or anyone officially involved in producing or managing VRChat. VRChat is trademark of VRChat Inc. VRChat Â© VRChat Inc.
                        p pypy is not responsible for any problems caused by VRCX. Use at your own risk!
                    div.options-container-item
                        el-button(@click="ossDialog = true" size="small") Open Source Software Notice

            //- friends
            .x-aside-container(v-show="$refs.menu && $refs.menu.activeIndex !== 'friendsList'")
                div(style="display:inline-block")
                    el-select(v-model="quickSearch" clearable placeholder="Search" filterable remote :remote-method="quickSearchRemoteMethod" popper-class="x-quick-search" @change="quickSearchChange" @visible-change="quickSearchVisibleChange" style="flex:none;padding:10px;width:177px")
                        el-option(v-for="item in quickSearchItems" :key="item.value" :value="item.value" :label="item.label")
                            .x-friend-item
                                template(v-if="item.ref")
                                    .detail
                                        span.name(v-text="item.ref.displayName" :class="item.ref.$trustClass")
                                        location.extra(:location="item.ref.location" :link="false")
                                    img.avatar(v-if="displayProfilePicOverrideAsAvatar && item.ref.profilePicOverride" v-lazy="item.ref.profilePicOverride")
                                    img.avatar(v-else-if="displayVRCPlusIconsAsAvatar && item.ref.userIcon" v-lazy="item.ref.userIcon")
                                    img.avatar(v-else v-lazy="item.ref.currentAvatarThumbnailImageUrl")
                                span(v-else) Search More: #[span(v-text="item.label" style="font-weight:bold")]
                    el-button(type="default" @click="API.getCurrentUser(); API.refreshFriends()" size="mini" icon="el-icon-refresh" circle)
                .x-friend-list(style="padding-bottom:10px")
                    .x-friend-group
                        i.el-icon-arrow-right(:class="{ rotate: isFriendsGroupMe }")
                        span.x-link(@click="isFriendsGroupMe = !isFriendsGroupMe" style="margin-left:5px") ME
                    div(v-show="isFriendsGroupMe")
                        .x-friend-item(:key="API.currentUser.id" @click="showUserDialog(API.currentUser.id)")
                            .avatar(:class="userStatusClass(API.currentUser)")
                                img(v-if="displayProfilePicOverrideAsAvatar && API.currentUser.profilePicOverride" v-lazy="API.currentUser.profilePicOverride")
                                img(v-else-if="displayVRCPlusIconsAsAvatar && API.currentUser.userIcon" v-lazy="API.currentUser.userIcon")
                                img(v-else v-lazy="API.currentUser.currentAvatarThumbnailImageUrl")
                            .detail
                                span.name(v-text="API.currentUser.displayName" :class="API.currentUser.$trustClass")
                                location.extra(v-if="isGameRunning === true" :location="lastLocation.location" :link="false")
                                span.extra(v-else v-text="API.currentUser.statusDescription" :link="false")
                    .x-friend-group(v-show="friendsGroup0.length")
                        i.el-icon-arrow-right(:class="{ rotate: isFriendsGroup0 }")
                        span.x-link(@click="isFriendsGroup0 = !isFriendsGroup0" style="margin-left:5px") VIP&horbar;{{ friendsGroup0.length }}
                    div(v-show="isFriendsGroup0")
                        .x-friend-item(v-for="friend in friendsGroup0" :key="friend.id" @click="showUserDialog(friend.id)")
                            template(v-if="friend.ref")
                                .avatar(:class="userStatusClass(friend.ref)")
                                    img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                    img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                    img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                .detail
                                    span.name(v-if="friend.memo" :class="friend.ref.$trustClass") {{ friend.ref.displayName }} ({{ friend.memo }})
                                    span.name(v-else v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                    location.extra(:location="friend.ref.location" :link="false")
                            template(v-else)
                                span(v-text="friend.name || friend.id")
                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="confirmDeleteFriend(friend.id)" style="margin-left:5px")
                    .x-friend-group(v-show="friendsGroup1.length")
                        i.el-icon-arrow-right(:class="{ rotate: isFriendsGroup1 }")
                        span.x-link(@click="isFriendsGroup1 = !isFriendsGroup1" style="margin-left:5px") ONLINE&horbar;{{ friendsGroup1.length }}
                    div(v-show="isFriendsGroup1")
                        .x-friend-item(v-for="friend in friendsGroup1" :key="friend.id" @click="showUserDialog(friend.id)")
                            template(v-if="friend.ref")
                                .avatar(:class="userStatusClass(friend.ref)")
                                    img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                    img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                    img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                .detail
                                    span.name(v-if="friend.memo" :class="friend.ref.$trustClass") {{ friend.ref.displayName }} ({{ friend.memo }})
                                    span.name(v-else v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                    location.extra(:location="friend.ref.location" :link="false")
                            template(v-else)
                                span(v-text="friend.name || friend.id")
                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="confirmDeleteFriend(friend.id)" style="margin-left:5px")
                    .x-friend-group(v-show="friendsGroup2.length")
                        i.el-icon-arrow-right(:class="{ rotate: isFriendsGroup2 }")
                        span.x-link(@click="isFriendsGroup2 = !isFriendsGroup2" style="margin-left:5px") ACTIVE&horbar;{{ friendsGroup2.length }}
                    div(v-show="isFriendsGroup2")
                        .x-friend-item(v-for="friend in friendsGroup2" :key="friend.id" @click="showUserDialog(friend.id)")
                            template(v-if="friend.ref")
                                .avatar
                                    img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                    img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                    img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                .detail
                                    span.name(v-if="friend.memo" :class="friend.ref.$trustClass") {{ friend.ref.displayName }} ({{ friend.memo }})
                                    span.name(v-else v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                    span.extra(v-text="friend.ref.statusDescription" :link="false")
                            template(v-else)
                                span(v-text="friend.name || friend.id")
                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="confirmDeleteFriend(friend.id)" style="margin-left:5px")
                    .x-friend-group(v-show="friendsGroup3.length")
                        i.el-icon-arrow-right(:class="{ rotate: isFriendsGroup3 }")
                        span.x-link(@click="isFriendsGroup3 = !isFriendsGroup3" style="margin-left:5px") OFFLINE&horbar;{{ friendsGroup3.length }}
                    div(v-show="isFriendsGroup3")
                        .x-friend-item(v-for="friend in friendsGroup3" :key="friend.id" @click="showUserDialog(friend.id)")
                            template(v-if="friend.ref")
                                .avatar
                                    img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                    img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                    img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                .detail
                                    span.name(v-if="friend.memo" :class="friend.ref.$trustClass") {{ friend.ref.displayName }} ({{ friend.memo }})
                                    span.name(v-else v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                    span.extra(v-text="friend.ref.statusDescription")
                            template(v-else)
                                span(v-text="friend.name || friend.id")
                                el-button(type="text" icon="el-icon-close" size="mini" @click.stop="confirmDeleteFriend(friend.id)" style="margin-left:5px")

            //- dialog: user
            el-dialog.x-dialog.x-user-dialog(ref="userDialog" :visible.sync="userDialog.visible" :show-close="false" width="770px")
                div(v-loading="userDialog.loading")
                    div(style="display:flex")
                        el-popover(v-if="displayProfilePicOverrideAsAvatar && userDialog.ref.profilePicOverride" placement="right" width="500px" trigger="click")
                            img.x-link(slot="reference" v-lazy="userDialog.ref.profilePicOverride" style="flex:none;width:160px;height:120px;border-radius:4px;object-fit:cover")
                            img.x-link(v-lazy="userDialog.ref.profilePicOverride" style="width:500px;height:375px;object-fit:cover" @click="openExternalLink(userDialog.ref.profilePicOverride)")
                        el-popover(v-else placement="right" width="500px" trigger="click")
                            img.x-link(slot="reference" v-lazy="userDialog.ref.currentAvatarThumbnailImageUrl" style="flex:none;width:160px;height:120px;border-radius:4px")
                            img.x-link(v-lazy="userDialog.ref.currentAvatarImageUrl" style="width:500px;height:375px" @click="openExternalLink(userDialog.ref.currentAvatarImageUrl)")
                        div(style="flex:1;display:flex;align-items:center;margin-left:15px")
                            div(style="flex:1")
                                div
                                    el-tooltip(v-if="userDialog.ref.status" placement="top")
                                        template(#content)
                                            span(v-if="userDialog.ref.state === 'active'") Active
                                            span(v-else-if="userDialog.ref.location === 'offline'") Offline
                                            span(v-else-if="userDialog.ref.status === 'active'") Online
                                            span(v-else-if="userDialog.ref.status === 'join me'") Join Me
                                            span(v-else-if="userDialog.ref.status === 'ask me'") Ask Me
                                            span(v-else-if="userDialog.ref.status === 'busy'") Do Not Disturb
                                            span(v-else) Offline
                                        i.x-user-status(:class="userStatusClass(userDialog.ref)")
                                    span(v-text="userDialog.ref.displayName" style="margin-left:5px;font-weight:bold")
                                    el-popover(placement="top" trigger="click")
                                        span(slot="reference" v-text="userDialog.ref.username" style="margin-left:5px;color:#909399;font-family:monospace;font-size:12px;cursor:pointer")
                                        span(style="display:block;text-align:center;font-family:monospace") {{ userDialog.ref.username | textToHex }}
                                    el-tooltip(v-for="item in userDialog.ref.$languages" :key="item.key" placement="top")
                                        template(#content)
                                            span {{ item.value }} ({{ item.key }})
                                        span.famfamfam-flags(:class="languageClass(item.key)" style="display:inline-block;margin-left:5px")
                                div(style="margin-top:5px")
                                    el-tag.name(type="info" effect="plain" size="mini" :class="userDialog.ref.$trustClass" v-text="userDialog.ref.$trustLevel")
                                    el-tag.x-tag-friend(v-if="userDialog.isFriend && userDialog.friend" type="info" effect="plain" size="mini" style="margin-left:5px") Friend No.{{userDialog.friend.no}}
                                    el-tag.x-tag-vrcplus(type="info" effect="plain" size="mini" v-if="userDialog.ref.$isVRCPlus" style="margin-left:5px") VRC+
                                    el-tag.x-tag-platform-pc(type="info" effect="plain" size="mini" v-if="userDialog.ref.last_platform === 'standalonewindows'" style="margin-left:5px") PC
                                    el-tag.x-tag-platform-quest(type="info" effect="plain" size="mini" v-if="userDialog.ref.last_platform === 'android'" style="margin-left:5px") Quest
                                div(style="margin-top:5px")
                                    span(v-text="userDialog.ref.statusDescription" style="font-size:12px")
                            div(v-if="userDialog.ref.userIcon" style="flex:none;margin-right:10px")
                                el-popover(placement="right" width="500px" trigger="click")
                                    img.x-link(slot="reference" v-lazy="userDialog.ref.userIcon" style="flex:none;width:120px;height:120px;border-radius:4px")
                                    img.x-link(v-lazy="userDialog.ref.userIcon" style="width:500px;height:500px;" @click="openExternalLink(userDialog.ref.userIcon)")
                            div(style="flex:none")
                                el-button(v-if="userDialog.isFavorite" @click="userDialogCommand('Delete Favorite')" type="warning" icon="el-icon-star-on" circle)
                                el-button(v-else type="default" @click="userDialogCommand('Add Favorite')" icon="el-icon-star-off" circle)
                                el-dropdown(trigger="click" @command="userDialogCommand" size="small")
                                    el-button(:type="(userDialog.incomingRequest || userDialog.outgoingRequest) ? 'success' : (userDialog.isBlock || userDialog.isMute || userDialog.isHideAvatar) ? 'danger' : 'default'" icon="el-icon-more" circle style="margin-left:5px")
                                    el-dropdown-menu(#default="dropdown")
                                        el-dropdown-item(icon="el-icon-refresh" command="Refresh") Refresh
                                        template(v-if="userDialog.ref.id === API.currentUser.id")
                                            el-dropdown-item(icon="el-icon-picture-outline" command="Manage Gallery" divided) Manage Gallery/Icons
                                            el-dropdown-item(icon="el-icon-check" command="Select Avatar") Select Avatar By ID
                                            el-dropdown-item(icon="el-icon-s-custom" command="Show Avatar Author") Show Avatar Author
                                            el-dropdown-item(icon="el-icon-s-custom" command="Show Fallback Avatar Details") Show Fallback Avatar Details
                                            el-dropdown-item(icon="el-icon-edit" command="Edit Social Status" divided) Social Status
                                            el-dropdown-item(icon="el-icon-edit" command="Edit Language") Language
                                            el-dropdown-item(icon="el-icon-edit" command="Edit Bio") Bio
                                            el-dropdown-item(icon="el-icon-switch-button" command="Logout" divided) Logout
                                        template(v-else)
                                            template(v-if="userDialog.isFriend")
                                                el-dropdown-item(icon="el-icon-postcard" command="Request Invite" divided) Request Invite
                                                el-dropdown-item(icon="el-icon-postcard" command="Request Invite Message") Request Invite With Message
                                                template(v-if="lastLocation.location && isGameRunning")
                                                    el-dropdown-item(icon="el-icon-message" command="Invite") Invite
                                                    el-dropdown-item(icon="el-icon-message" command="Invite Message") Invite With Message
                                            template(v-else-if="userDialog.incomingRequest")
                                                el-dropdown-item(icon="el-icon-check" command="Accept Friend Request") Accept Friend Request
                                                el-dropdown-item(icon="el-icon-close" command="Decline Friend Request") Decline Friend Request
                                            el-dropdown-item(v-else-if="userDialog.outgoingRequest" icon="el-icon-close" command="Cancel Friend Request") Cancel Friend Request
                                            el-dropdown-item(v-else icon="el-icon-plus" command="Send Friend Request") Send Friend Request
                                            el-dropdown-item(icon="el-icon-s-custom" command="Show Avatar Author" divided) Show Avatar Author
                                            el-dropdown-item(icon="el-icon-s-custom" command="Show Fallback Avatar Details") Show Fallback Avatar Details
                                            el-dropdown-item(icon="el-icon-picture-outline" command="Previous Images") Show Avatar Previous Images
                                            el-dropdown-item(v-if="userDialog.isBlock" icon="el-icon-circle-check" command="Unblock" divided style="color:#F56C6C") Unblock
                                            el-dropdown-item(v-else icon="el-icon-circle-close" command="Block" divided) Block
                                            el-dropdown-item(v-if="userDialog.isMute" icon="el-icon-microphone" command="Unmute" style="color:#F56C6C") Unmute
                                            el-dropdown-item(v-else icon="el-icon-turn-off-microphone" command="Mute") Mute
                                            el-dropdown-item(v-if="userDialog.isHideAvatar" icon="el-icon-user-solid" command="Show Avatar" style="color:#F56C6C") Show Avatar
                                            el-dropdown-item(v-else icon="el-icon-user" command="Hide Avatar") Hide Avatar
                                            template(v-if="userDialog.isFriend")
                                                el-dropdown-item(icon="el-icon-delete" command="Unfriend" divided) Unfriend
                    el-tabs(ref="userDialogTabs" @tab-click="userDialogTabClick")
                        el-tab-pane(label="Info")
                            div(v-if="userDialog.ref.location" style="display:flex;flex-direction:column;margin-bottom:10px;padding-bottom:10px;border-bottom:1px solid #eee")
                                div(style="flex:none")
                                    location(:location="userDialog.ref.location")
                                        template(v-if="userDialog.ref.location && userDialog.ref.location !== 'private' && userDialog.ref.location !== 'offline'")
                                            span.famfamfam-flags(v-if="userDialog.$location.region === 'eu'" class="europeanunion" style="display:inline-block;margin-left:5px")
                                            span.famfamfam-flags(v-else-if="userDialog.$location.region === 'jp'" class="jp" style="display:inline-block;margin-left:5px")
                                            span.famfamfam-flags(v-else class="us" style="display:inline-block;margin-left:5px")
                                    template(v-if="userDialog.ref.location && userDialog.ref.location !== 'private' && userDialog.ref.location !== 'offline'")
                                        launch(:location="userDialog.ref.location" style="margin-left:5px")
                                        invite-yourself(:location="userDialog.ref.location" style="margin-left:5px")
                                        el-button(v-if="copyLocationCheck(userDialog.ref.location)" @click="copyLocation(userDialog.ref.location)" size="mini" icon="el-icon-s-order" style="margin-left:5px" circle)
                                        el-button(@click="refreshInstancePlayerCount(userDialog.ref.location)" size="mini" icon="el-icon-refresh" style="margin-left:5px" circle)
                                        span(v-if="userDialog.instance.occupants" style="margin-left:5px") {{ userDialog.instance.occupants }}  #[template(v-if="userDialog.users.length > 0") ({{ userDialog.users.length }})]
                                .x-friend-list(style="flex:1;margin-top:10px")
                                    .x-friend-item(v-if="userDialog.$location.userId" @click="showUserDialog(userDialog.$location.userId)")
                                        template(v-if="userDialog.$location.user")
                                            .avatar(:class="userStatusClass(userDialog.$location.user)")
                                                img(v-if="displayProfilePicOverrideAsAvatar && userDialog.$location.user.profilePicOverride" v-lazy="userDialog.$location.user.profilePicOverride")
                                                img(v-else-if="displayVRCPlusIconsAsAvatar && userDialog.$location.user.userIcon" v-lazy="userDialog.$location.user.userIcon")
                                                img(v-else v-lazy="userDialog.$location.user.currentAvatarThumbnailImageUrl")
                                            .detail
                                                span.name(v-text="userDialog.$location.user.displayName" :class="userDialog.$location.user.$trustClass")
                                                span.extra Instance Creator
                                        span(v-else v-text="userDialog.$location.userId")
                                    .x-friend-item(v-for="user in userDialog.users" :key="user.id" @click="showUserDialog(user.id)")
                                        .avatar(:class="userStatusClass(user)")
                                            img(v-if="displayProfilePicOverrideAsAvatar && user.profilePicOverride" v-lazy="user.profilePicOverride")
                                            img(v-else-if="displayVRCPlusIconsAsAvatar && user.userIcon" v-lazy="user.userIcon")
                                            img(v-else v-lazy="user.currentAvatarThumbnailImageUrl")
                                        .detail
                                            span.name(v-text="user.displayName" :class="user.$trustClass")
                                            span.extra
                                                timer(:epoch="user.$location_at")
                            .x-friend-list(style="max-height:none")
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name Note
                                        el-input.extra(v-model="userDialog.memo" type="textarea" :rows="2" :autosize="{ minRows: 1, maxRows: 20 }" placeholder="Click to add a note" size="mini" resize="none")
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name Avatar Info
                                        .extra
                                            el-popover(v-if="displayProfilePicOverrideAsAvatar && userDialog.ref.profilePicOverride" placement="right" width="500px" trigger="click" style="display:inline-block;margin-right:5px")
                                                img.x-link(slot="reference" v-lazy="userDialog.ref.currentAvatarThumbnailImageUrl" style="flex:none;width:80px;height:60px;border-radius:4px;object-fit:cover")
                                                img.x-link(v-lazy="userDialog.ref.currentAvatarImageUrl" style="width:500px;height:375px;object-fit:cover" @click="openExternalLink(userDialog.ref.currentAvatarImageUrl)")
                                            div(@click="userDialogCommand('Show Avatar Author')" style="cursor:pointer;width:fit-content;display:inline-block;vertical-align:top")
                                                span(v-text="userDialog.$avatarInfo.avatarName" style="display:inline-block;margin-right:5px")
                                                span(v-if="userDialog.$avatarInfo.ownerId === userDialog.id" style="display:inline-block;color:#E6A23C" ) (own)
                                                span(v-else-if="userDialog.$avatarInfo.avatarName && userDialog.$avatarInfo.ownerId" style="display:inline-block;color:#67C23A") â(public)
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name Bio
                                        pre.extra(style="font-family:inherit;font-size:12px;white-space:pre-wrap;margin:0 0.5em 0 0") {{ userDialog.ref.bio || '-' }}
                                        div(style="margin-top:5px")
                                            el-tooltip(v-if="link" v-for="(link, index) in userDialog.ref.bioLinks" :key="index")
                                                template(#content)
                                                    span(v-text="link")
                                                img(:src="getFaviconUrl(link)" style="width:16px;height:16px;vertical-align:middle;margin-right:5px;cursor:pointer" @click.stop="openExternalLink(link)")
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Avatar Copying
                                        span.extra(v-if="userDialog.ref.allowAvatarCopying" style="color:#67C23A") Allow
                                        span.extra(v-else style="color:#F56C6C") Deny
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name(v-if="userDialog.ref.state === 'online' && userDialog.ref.$online_for") Online For
                                        span.name(v-else) Offline For
                                        span.extra(v-text="userOnlineFor(userDialog)")
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Last Login
                                        span.extra {{ userDialog.ref.last_login | formatDate('YYYY-MM-DD HH24:MI:SS') || '-' }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Date Joined
                                        span.extra(v-text="userDialog.ref.date_joined")
                                .x-friend-item(v-if="userDialog.ref.id === API.currentUser.id && API.currentUser.homeLocation" @click="showWorldDialog(API.currentUser.homeLocation)" style="width:100%")
                                    .detail
                                        span.name Home Location
                                        span.extra
                                            location(:location="API.currentUser.homeLocation" :link="false")
                                            el-button(@click.stop="resetHome()" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                        el-tab-pane(label="Worlds")
                            el-button(type="default" :loading="userDialog.isWorldsLoading" @click="refreshUserDialogWorlds()" size="mini" icon="el-icon-refresh" circle)
                            span(style="margin-left:5px") Total {{ userDialog.worlds.length }}
                            el-radio-group(v-model="userDialog.worldSorting" size="mini" style="margin-left:30px" @change="changeUserDialogWorldSorting")
                                el-radio(label="name") by name
                                el-radio(label="update") by update
                            .x-friend-list(v-loading="userDialog.isWorldsLoading" style="margin-top:10px;min-height:60px")
                                .x-friend-item(v-for="world in userDialog.worlds" :key="world.id" @click="showWorldDialog(world.id)")
                                    .avatar
                                        img(v-lazy="world.thumbnailImageUrl")
                                    .detail
                                        span.name(v-text="world.name")
                                        span.extra(v-if="world.occupants") ({{ world.occupants }})
                        el-tab-pane(label="Favorite Worlds")
                            el-button(type="default" :loading="userDialog.isFavoriteWorldsLoading" @click="getUserFavoriteWorlds(userDialog.id)" size="mini" icon="el-icon-refresh" circle)
                            div(v-loading="userDialog.isFavoriteWorldsLoading" style="min-height:60px")
                                template(v-for="(list, index) in userFavoriteWorlds" v-if="list")
                                    span(style="font-weight:bold;font-size:16px") {{ list[0] }}
                                    i.x-user-status(style="margin-left:5px" :class="userFavoriteWorldsStatus(list[1])")
                                    span(style="color:#909399;font-size:12px;margin-left:5px") {{ list[2].length }}/64
                                    .x-friend-list(style="margin-top:10px;margin-bottom:15px;min-height:60px")
                                        .x-friend-item(v-for="world in list[2]" :key="world.id" @click="showWorldDialog(world.id)")
                                            .avatar
                                                img(v-lazy="world.thumbnailImageUrl")
                                            .detail
                                                span.name(v-text="world.name")
                                                span.extra(v-if="world.occupants") ({{ world.occupants }})
                        el-tab-pane(label="Avatars")
                            template(v-if="userDialog.ref.id === API.currentUser.id")
                                el-button(type="default" :loading="userDialog.isAvatarsLoading" @click="refreshUserDialogAvatars()" size="mini" icon="el-icon-refresh" circle)
                            span(style="margin-left:5px") Total {{ userDialogAvatars.length }}
                            el-radio-group(v-model="userDialog.avatarSorting" size="mini" style="margin-left:30px" @change="changeUserDialogAvatarSorting")
                                el-radio(label="name") by name
                                el-radio(label="update") by update
                            el-radio-group(v-model="userDialog.avatarReleaseStatus" size="mini" style="margin-left:60px")
                                el-radio(label="all") all
                                el-radio(label="public") public
                                el-radio(label="private") private
                            .x-friend-list(v-loading="userDialog.isAvatarsLoading" style="margin-top:10px;min-height:60px")
                                .x-friend-item(v-for="avatar in userDialogAvatars" :key="avatar.id" @click="showAvatarDialog(avatar.id)")
                                    .avatar
                                        img(v-lazy="avatar.thumbnailImageUrl")
                                    .detail
                                        span.name(v-text="avatar.name")
                                        span.extra(v-text="avatar.releaseStatus" v-if="avatar.releaseStatus === 'public'" style="color: #67c23a;")
                                        span.extra(v-text="avatar.releaseStatus" v-else-if="avatar.releaseStatus === 'private'" style="color: #f56c6c;")
                                        span.extra(v-text="avatar.releaseStatus" v-else)
                        el-tab-pane(label="JSON")
                            el-button(type="default" @click="refreshUserDialogTreeData()" size="mini" icon="el-icon-refresh" circle)
                            el-tree(:data="userDialog.treeData" style="margin-top:5px;font-size:12px")
                                template(#default="scope")
                                    span
                                        span(v-text="scope.data.key" style="font-weight:bold;margin-right:5px")
                                        span(v-if="!scope.data.children" v-text="scope.data.value")

            //- dialog: world
            el-dialog.x-dialog.x-world-dialog(ref="worldDialog" :visible.sync="worldDialog.visible" :show-close="false" width="770px")
                div(v-loading="worldDialog.loading")
                    div(style="display:flex")
                        el-popover(placement="right" width="500px" trigger="click")
                            img.x-link(slot="reference" v-lazy="worldDialog.ref.thumbnailImageUrl" style="flex:none;width:160px;height:120px;border-radius:4px")
                            img.x-link(v-lazy="worldDialog.ref.imageUrl" style="width:500px;height:375px" @click="openExternalLink(worldDialog.ref.imageUrl)")
                        div(style="flex:1;display:flex;align-items:center;margin-left:15px")
                            div(style="flex:1")
                                div
                                    i.el-icon-s-home(v-show="API.currentUser.$homeLocation && API.currentUser.$homeLocation.worldId === worldDialog.id")
                                    span(v-text="worldDialog.ref.name" style="font-weight:bold")
                                div(style="margin-top:5px")
                                    span.x-link(v-text="worldDialog.ref.authorName" @click="showUserDialog(worldDialog.ref.authorId)" style="color:#909399;font-family:monospace")
                                div(style="margin-top:5px")
                                    el-tag(v-if="worldDialog.ref.$isLabs" type="primary" effect="plain" size="mini") Labs
                                    el-tag(v-else-if="worldDialog.ref.releaseStatus === 'public'" type="success" effect="plain" size="mini") Public
                                    el-tag(v-else type="danger" effect="plain" size="mini") Private
                                    el-tag(type="info" effect="plain" size="mini" v-text="worldDialog.fileSize" style="margin-left:5px")
                                div(style="margin-top:5px")
                                    span(v-show="worldDialog.ref.name !== worldDialog.ref.description" v-text="worldDialog.ref.description" style="font-size:12px")
                            div(style="flex:none;margin-left:10px")
                                el-button(v-if="worldDialog.inCache" icon="el-icon-delete" circle @click="deleteVRChatCache(worldDialog.ref)")
                                el-button(v-else-if="downloadCurrent.id === worldDialog.id || downloadQueue.has(worldDialog.id)" icon="el-icon-loading" circle @click="showDownloadDialog")
                                el-button(v-else icon="el-icon-download" circle @click="queueCacheDownload(worldDialog.ref, 'Manual')")
                                el-button(v-if="worldDialog.isFavorite" type="warning" icon="el-icon-star-on" circle @click="worldDialogCommand('Delete Favorite')" style="margin-left:5px")
                                el-button(v-else type="default" icon="el-icon-star-off" circle @click="worldDialogCommand('Add Favorite')" style="margin-left:5px")
                                el-dropdown(trigger="click" @command="worldDialogCommand" size="small" style="margin-left:5px")
                                    el-button(type="default" icon="el-icon-more" circle)
                                    el-dropdown-menu(#default="dropdown")
                                        el-dropdown-item(icon="el-icon-refresh" command="Refresh") Refresh
                                        el-dropdown-item(icon="el-icon-s-flag" command="New Instance" divided) New Instance
                                        el-dropdown-item(v-if="API.currentUser.$homeLocation && API.currentUser.$homeLocation.worldId === worldDialog.id" icon="el-icon-magic-stick" command="Reset Home" divided) Reset Home
                                        el-dropdown-item(v-else icon="el-icon-s-home" command="Make Home" divided) Make Home
                                        template(v-if="API.currentUser.id !== worldDialog.ref.authorId")
                                            el-dropdown-item(icon="el-icon-picture-outline" command="Previous Images") Previous Images
                                        template(v-else)
                                            el-dropdown-item(icon="el-icon-edit" command="Rename") Rename
                                            el-dropdown-item(icon="el-icon-edit" command="Change Description") Change Description
                                            el-dropdown-item(icon="el-icon-picture-outline" command="Change Image") Change Image
                                            el-dropdown-item(icon="el-icon-upload2" command="Upload Image") Upload Image
                                                input(type="file" accept="image/*" @change="onFileChangeWorldImage" id="WorldImageUploadButton" style="display:none")
                                            el-dropdown-item(icon="el-icon-delete" command="Delete" style="color:#F56C6C" divided) Delete
                    el-tabs
                        el-tab-pane(label="Instances")
                            div.
                                #[i.el-icon-user] Public {{ worldDialog.ref.publicOccupants | commaNumber }}
                                #[i.el-icon-user-solid(style="margin-left:10px")] Private {{ worldDialog.ref.privateOccupants | commaNumber }}
                                #[i.el-icon-check(style="margin-left:10px")] Capacity {{ worldDialog.ref.capacity | commaNumber }}
                            div(v-for="room in worldDialog.rooms" :key="room.id")
                                div(style="margin:5px 0")
                                    span.x-link(@click="showLaunchDialog(room.$location.tag)")
                                        span \#{{ room.$location.instanceName }} {{ room.$location.accessType }}
                                        span.famfamfam-flags(v-if="room.$location.region === 'eu'" class="europeanunion" style="display:inline-block;margin-left:5px")
                                        span.famfamfam-flags(v-else-if="room.$location.region === 'jp'" class="jp" style="display:inline-block;margin-left:5px")
                                        span.famfamfam-flags(v-else class="us" style="display:inline-block;margin-left:5px")
                                    invite-yourself(:location="room.$location.tag" style="margin-left:5px")
                                    el-button(v-if="copyLocationCheck(room.$location.tag)" @click="copyLocation(room.$location.tag)" size="mini" icon="el-icon-s-order" style="margin-left:5px" circle)
                                    el-button(@click="refreshInstancePlayerCount(room.$location.tag)" size="mini" icon="el-icon-refresh" style="margin-left:5px" circle)
                                    span(v-if="room.occupants" style="margin-left:5px") {{ room.occupants }}  #[template(v-if="room.users.length > 0") ({{ room.users.length }})]
                                .x-friend-list(style="margin:10px 0" v-if="room.$location.userId || room.users.length")
                                    .x-friend-item(v-if="room.$location.userId" @click="showUserDialog(room.$location.userId)")
                                        template(v-if="room.$location.user")
                                            .avatar(:class="userStatusClass(room.$location.user)")
                                                img(v-if="displayProfilePicOverrideAsAvatar && room.$location.user.profilePicOverride" v-lazy="room.$location.user.profilePicOverride")
                                                img(v-else-if="displayVRCPlusIconsAsAvatar && room.$location.user.userIcon" v-lazy="room.$location.user.userIcon")
                                                img(v-else v-lazy="room.$location.user.currentAvatarThumbnailImageUrl")
                                            .detail
                                                span.name(v-text="room.$location.user.displayName" :class="room.$location.user.$trustClass")
                                                span.extra Instance Creator
                                        span(v-else v-text="room.$location.userId")
                                    .x-friend-item(v-for="user in room.users" :key="user.id" @click="showUserDialog(user.id)")
                                        .avatar(:class="userStatusClass(user)")
                                            img(v-if="displayProfilePicOverrideAsAvatar && user.profilePicOverride" v-lazy="user.profilePicOverride")
                                            img(v-else-if="displayVRCPlusIconsAsAvatar && user.userIcon" v-lazy="user.userIcon")
                                            img(v-else v-lazy="user.currentAvatarThumbnailImageUrl")
                                        .detail
                                            span.name(v-text="user.displayName" :class="user.$trustClass")
                                            span.extra
                                                timer(:epoch="user.$location_at")
                        el-tab-pane(label="Info")
                            .x-friend-list(style="max-height:none")
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name World ID
                                        span.extra(v-text="worldDialog.id")
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Players
                                        span.extra {{ worldDialog.ref.occupants | commaNumber }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Favorites
                                        span.extra {{ worldDialog.ref.favorites | commaNumber }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Visits
                                        span.extra {{ worldDialog.ref.visits | commaNumber }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Capacity
                                        span.extra(v-text="worldDialog.ref.capacity")
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Heat
                                        span.extra {{ worldDialog.ref.heat | commaNumber }} {{ 'ð¥'.repeat(worldDialog.ref.heat) }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Popularity
                                        span.extra {{ worldDialog.ref.popularity | commaNumber }} {{ 'ð'.repeat(worldDialog.ref.popularity) }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Created
                                        span.extra {{ worldDialog.ref.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') || '-' }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Last Updated
                                        span.extra {{ worldDialog.fileCreatedAt | formatDate('YYYY-MM-DD HH24:MI:SS') || '-' }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Version
                                        span.extra(v-text="worldDialog.ref.version")
                                .x-friend-item(style="width:525px;cursor:default")
                                    .detail
                                        span.name Platform
                                        span.extra(v-text="worldDialogPlatform")
                        el-tab-pane(label="JSON")
                            el-button(type="default" @click="refreshWorldDialogTreeData()" size="mini" icon="el-icon-refresh" circle)
                            el-tree(:data="worldDialog.treeData" style="margin-top:5px;font-size:12px")
                                template(#default="scope")
                                    span
                                        span(v-text="scope.data.key" style="font-weight:bold;margin-right:5px")
                                        span(v-if="!scope.data.children" v-text="scope.data.value")

            //- dialog: avatar
            el-dialog.x-dialog.x-avatar-dialog(ref="avatarDialog" :visible.sync="avatarDialog.visible" :show-close="false" width="600px")
                div(v-loading="avatarDialog.loading")
                    div(style="display:flex")
                        el-popover(placement="right" width="500px" trigger="click")
                            img.x-link(slot="reference" v-lazy="avatarDialog.ref.thumbnailImageUrl" style="flex:none;width:160px;height:120px;border-radius:4px")
                            img.x-link(v-lazy="avatarDialog.ref.imageUrl" style="width:500px;height:375px" @click="openExternalLink(avatarDialog.ref.imageUrl)")
                        div(style="flex:1;display:flex;align-items:center;margin-left:15px")
                            div(style="flex:1")
                                div
                                    span(v-text="avatarDialog.ref.name" style="font-weight:bold")
                                div(style="margin-top:5px")
                                    span.x-link(v-text="avatarDialog.ref.authorName" @click="showUserDialog(avatarDialog.ref.authorId)" style="color:#909399;font-family:monospace")
                                div(style="margin-top:5px")
                                    el-tag(v-if="avatarDialog.ref.releaseStatus === 'public'" type="success" effect="plain" size="mini") Public
                                    el-tag(v-else type="danger" effect="plain" size="mini") Private
                                    el-tag(v-if="/quest/.test(avatarDialog.ref.tags)" type="info" effect="plain" size="mini" style="margin-left:5px") Fallback
                                    el-tag(type="info" effect="plain" size="mini" v-text="avatarDialog.fileSize" style="margin-left:5px")
                                div(style="margin-top:5px")
                                    span(v-show="avatarDialog.ref.name !== avatarDialog.ref.description" v-text="avatarDialog.ref.description" style="font-size:12px")
                            div(style="flex:none;margin-left:10px")
                                el-button(v-if="avatarDialog.isFavorite" type="warning" icon="el-icon-star-on" circle @click="avatarDialogCommand('Delete Favorite')")
                                el-button(v-else type="default" icon="el-icon-star-off" circle @click="avatarDialogCommand('Add Favorite')")
                                el-dropdown(trigger="click" @command="avatarDialogCommand" size="small" style="margin-left:5px")
                                    el-button(type="default" icon="el-icon-more" circle)
                                    el-dropdown-menu(#default="dropdown")
                                        el-dropdown-item(icon="el-icon-check" command="Select Avatar") Select Avatar
                                        el-dropdown-item(v-if="/quest/.test(avatarDialog.ref.tags)" icon="el-icon-check" command="Select Fallback Avatar") Select Fallback Avatar
                                        el-dropdown-item(v-if="avatarDialog.ref.authorId !== API.currentUser.id" icon="el-icon-picture-outline" command="Previous Images") Previous Images
                                        template(v-if="avatarDialog.ref.authorId === API.currentUser.id")
                                            el-dropdown-item(v-if="avatarDialog.ref.releaseStatus === 'public'" icon="el-icon-user-solid" command="Make Private" divided) Make Private
                                            el-dropdown-item(v-else icon="el-icon-user" command="Make Public" divided) Make Public
                                            el-dropdown-item(icon="el-icon-edit" command="Rename") Rename
                                            el-dropdown-item(icon="el-icon-edit" command="Change Description") Change Description
                                            el-dropdown-item(icon="el-icon-picture-outline" command="Change Image") Change Image
                                            el-dropdown-item(icon="el-icon-upload2" command="Upload Image") Upload Image
                                                input(type="file" accept="image/*" @change="onFileChangeAvatarImage" id="AvatarImageUploadButton" style="display:none")
                                            el-dropdown-item(v-if="avatarDialog.ref.unityPackageUrl" icon="el-icon-download" command="Download Unity Package") Download Unity Package
                                            el-dropdown-item(icon="el-icon-user" command="Delete" style="color:#F56C6C" divided) Delete
                    el-tabs
                        el-tab-pane(label="Info")
                            .x-friend-list
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name Avatar ID
                                        span.extra(v-text="avatarDialog.id")
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Created
                                        span.extra {{ avatarDialog.ref.created_at | formatDate('YYYY-MM-DD HH24:MI:SS') || '-' }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Last Updated
                                        span.extra {{ avatarDialog.ref.updated_at | formatDate('YYYY-MM-DD HH24:MI:SS') || '-' }}
                                .x-friend-item(style="cursor:default")
                                    .detail
                                        span.name Version
                                        span.extra(v-if="avatarDialog.ref.version !== 0" v-text="avatarDialog.ref.version")
                                        span.extra(v-else) -
                                .x-friend-item(style="width:100%;cursor:default")
                                    .detail
                                        span.name Platform
                                        span.extra(v-if="avatarDialogPlatform" v-text="avatarDialogPlatform")
                                        span.extra(v-else) -
                        el-tab-pane(label="JSON")
                            el-button(type="default" @click="refreshAvatarDialogTreeData()" size="mini" icon="el-icon-refresh" circle)
                            el-tree(:data="avatarDialog.treeData" style="margin-top:5px;font-size:12px")
                                template(#default="scope")
                                    span
                                        span(v-text="scope.data.key" style="font-weight:bold;margin-right:5px")
                                        span(v-if="!scope.data.children" v-text="scope.data.value")

            //- dialog: favorite
            el-dialog.x-dialog(ref="favoriteDialog" :visible.sync="favoriteDialog.visible" title="Choose Group" width="300px")
                div(v-loading="favoriteDialog.loading")
                    el-button(v-for="group in favoriteDialog.groups" :key="group.name" style="display:block;width:100%;margin:10px 0" @click="addFavorite(group)" :disabled="group.count >= group.capacity") {{ group.displayName }} ({{ group.count }} / {{ group.capacity }})

            //- dialog: invite
            el-dialog.x-dialog(ref="inviteDialog" :visible.sync="inviteDialog.visible" title="Invite" width="450px")
                div(v-loading="inviteDialog.loading")
                    location(:location="inviteDialog.worldId" :link="false")
                    el-select(v-model="inviteDialog.userIds" multiple clearable placeholder="Choose Friends" filterable :disabled="inviteDialog.loading" style="width:100%;margin-top:15px")
                        el-option-group(v-if="API.currentUser" label="ME")
                            el-option.x-friend-item(:label="API.currentUser.displayName" :value="API.currentUser.id" style="height:auto")
                                .avatar(:class="userStatusClass(API.currentUser)")
                                    img(v-if="displayProfilePicOverrideAsAvatar && API.currentUser.profilePicOverride" v-lazy="API.currentUser.profilePicOverride")
                                    img(v-else-if="displayVRCPlusIconsAsAvatar && API.currentUser.userIcon" v-lazy="API.currentUser.userIcon")
                                    img(v-else v-lazy="API.currentUser.currentAvatarThumbnailImageUrl")
                                .detail
                                    span.name(v-text="API.currentUser.displayName")
                        el-option-group(v-if="friendsGroup0.length" label="VIP")
                            el-option.x-friend-item(v-for="friend in friendsGroup0" :key="friend.id" :label="friend.name" :value="friend.id" style="height:auto")
                                template(v-if="friend.ref")
                                    .avatar(:class="userStatusClass(friend.ref)")
                                        img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                        img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                        img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                    .detail
                                        span.name(v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                span(v-else v-text="friend.id")
                        el-option-group(v-if="friendsGroup1.length" label="ONLINE")
                            el-option.x-friend-item(v-for="friend in friendsGroup1" :key="friend.id" :label="friend.name" :value="friend.id" style="height:auto")
                                template(v-if="friend.ref")
                                    .avatar(:class="userStatusClass(friend.ref)")
                                        img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                        img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                        img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                    .detail
                                        span.name(v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                span(v-else v-text="friend.id")
                        el-option-group(v-if="friendsGroup2.length" label="ACTIVE")
                            el-option.x-friend-item(v-for="friend in friendsGroup2" :key="friend.id" :label="friend.name" :value="friend.id" style="height:auto")
                                template(v-if="friend.ref")
                                    .avatar
                                        img(v-if="displayProfilePicOverrideAsAvatar && friend.ref.profilePicOverride" v-lazy="friend.ref.profilePicOverride")
                                        img(v-else-if="displayVRCPlusIconsAsAvatar && friend.ref.userIcon" v-lazy="friend.ref.userIcon")
                                        img(v-else v-lazy="friend.ref.currentAvatarThumbnailImageUrl")
                                    .detail
                                        span.name(v-text="friend.ref.displayName" :class="friend.ref.$trustClass")
                                span(v-else v-text="friend.id")
                template(#footer)
                    el-button(size="small" :disabled="inviteDialog.loading || !inviteDialog.userIds.length" @click="showSendInviteDialog()") Invite With Message
                    el-button(type="primary" size="small" :disabled="inviteDialog.loading || !inviteDialog.userIds.length" @click="sendInvite()") Invite

            //- dialog: social status
            el-dialog.x-dialog(ref="socialStatusDialog" :visible.sync="socialStatusDialog.visible" title="Social Status" width="400px")
                div(v-loading="socialStatusDialog.loading")
                    el-collapse(style="border:0")
                        el-collapse-item
                            template(slot="title")
                                span(style="font-size:16px") History
                            data-tables(v-bind="socialStatusHistoryTable" @row-click="setSocialStatusFromHistory" style="cursor:pointer")
                                el-table-column(label="No" prop="no" width="40")
                                el-table-column(label="Status" prop="status")
                    el-select(v-model="socialStatusDialog.status" style="dispaly:block;margin-top:10px")
                        el-option(label="Online" value="active").
                            #[i.x-user-status.online] Online
                        el-option(label="Join Me" value="join me").
                            #[i.x-user-status.joinme] Join Me
                        el-option(label="Ask Me" value="ask me").
                            #[i.x-user-status.askme] Ask Me
                        el-option(label="Do Not Disturb" value="busy").
                            #[i.x-user-status.busy] Do Not Disturb
                        el-option(label="Offline" value="offline").
                            #[i.x-user-status.offline] Offline
                    el-input(v-model="socialStatusDialog.statusDescription" placeholder="Status" maxlength="32" show-word-limit style="dispaly:block;margin-top:10px")
                template(#footer)
                    el-button(type="primary" size="small" :disabled="socialStatusDialog.loading" @click="saveSocialStatus") Update

            //- dialog: language
            el-dialog.x-dialog(ref="languageDialog" :visible.sync="languageDialog.visible" title="Language" width="400px")
                div(v-loading="languageDialog.loading")
                    div(style="margin:5px 0")
                        el-tag(v-for="item in API.currentUser.$languages" :key="item.key" size="small" type="info" effect="plain" closable @close="removeUserLanguage(item.key)" style="margin-right:5px")
                            span.famfamfam-flags(:class="languageClass(item.key)" style="display:inline-block;margin-right:5px")
                            | {{ item.value }} ({{ item.key }})
                    div(v-if="languageDialog.languageChoice === true")
                        el-select(v-model="languageDialog.languageValue" size="mini")
                            el-option(v-for="item in languageDialog.languages" :key="item.key" :value="item.key" :label="item.value")
                                span.famfamfam-flags(:class="languageClass(item.key)" style="display:inline-block;margin-right:5px")
                                | {{ item.value }} ({{ item.key }})
                        el-button(@click="languageDialog.languageChoice=false; addUserLanguage(languageDialog.languageValue)" size="mini") Ok
                        el-button(@click="languageDialog.languageChoice=false" size="mini" style="margin-left:0") Cancel
                    div(v-else)
                        el-button(@click="languageDialog.languageValue='';languageDialog.languageChoice=true" size="mini") Add Language

            //- dialog: bio
            el-dialog.x-dialog(ref="bioDialog" :visible.sync="bioDialog.visible" title="Bio" width="400px")
                div(v-loading="bioDialog.loading")
                    el-input(type="textarea" v-model="bioDialog.bio" size="mini" maxlength="512" show-word-limit :autosize="{ minRows:2, maxRows:5 }" placeholder="Please input a bio")
                    el-input(v-for="(link, index) in bioDialog.bioLinks" :key="index" :value="link" v-model="bioDialog.bioLinks[index]" size="small" style="margin-top:5px")
                        img(slot="prepend" :src="getFaviconUrl(link)" style="width:16px;height:16px")
                        el-button(slot="append" icon="el-icon-delete" @click="bioDialog.bioLinks.splice(index, 1)")
                    el-button(@click="bioDialog.bioLinks.push('')" size="mini" style="margin-top:5px") Add Link
                template(#footer)
                    el-button(type="primary" size="small" :disabled="bioDialog.loading" @click="saveBio") Update

            //- dialog: new instance
            el-dialog.x-dialog(ref="newInstanceDialog" :visible.sync="newInstanceDialog.visible" title="New Instance" width="600px")
                el-form(:model="newInstanceDialog" label-width="100px")
                    el-form-item(label="Access Type")
                        el-radio-group(v-model="newInstanceDialog.accessType" size="mini" @change="buildInstance")
                            el-radio-button(label="public")
                            el-radio-button(label="friends+")
                            el-radio-button(label="friends")
                            el-radio-button(label="invite+")
                            el-radio-button(label="invite")
                    el-form-item(label="Region")
                        el-radio-group(v-model="newInstanceDialog.region" size="mini" @change="buildInstance")
                            el-radio-button(label="USA")
                            el-radio-button(label="Europe")
                            el-radio-button(label="Japan")
                    el-form-item(label="World ID")
                        el-input(v-model="newInstanceDialog.worldId" size="mini" @click.native="$event.target.tagName === 'INPUT' && $event.target.select()")
                    el-form-item(label="Instance ID")
                        el-input(v-model="newInstanceDialog.instanceId" size="mini" @click.native="$event.target.tagName === 'INPUT' && $event.target.select()")
                    el-form-item(label="Location")
                        el-input(v-model="newInstanceDialog.location" size="mini" readonly @click.native="$event.target.tagName === 'INPUT' && $event.target.select()")
                    el-form-item(label="URL")
                        el-input(v-model="newInstanceDialog.url" size="mini" readonly @click.native="$event.target.tagName === 'INPUT' && $event.target.select()")
                template(#footer)
                    el-button(size="small" @click="makeHome(newInstanceDialog.location)") Make Home
                    el-button(size="small" @click="copyInstanceUrl(newInstanceDialog.url)") Copy URL
                    el-button(size="small" @click="selfInvite(newInstanceDialog.location)") Self Invite
                    el-button(size="small" @click="showInviteDialog(newInstanceDialog.location)") Invite
                    el-button(type="primary" size="small" @click="showLaunchDialog(newInstanceDialog.location)") Launch

            //- dialog: launch options
            el-dialog.x-dialog(ref="launchOptionsDialog" :visible.sync="launchOptionsDialog.visible" title="Launch Options" width="400px")
                div(style='font-size:12px;')
                    | These options are for advanced users only. #[br]
                    | to change fps: --fps=&lt;N&gt; ex) #[el-tag(size="mini") --fps=144]
                el-input(type="textarea" v-model="launchOptionsDialog.arguments" size="mini" show-word-limit :autosize="{ minRows:2, maxRows:5 }" placeholder="" style="margin-top:10px")
                template(#footer)
                    div(style="display:flex")
                        el-button(size="small" @click="openExternalLink('https://docs.vrchat.com/docs/launch-options')") VRChat Docs
                        el-button(size="small" @click="openExternalLink('https://docs.unity3d.com/Manual/CommandLineArguments.html')") Unity Manual
                        el-button(type="primary" size="small" :disabled="launchOptionsDialog.loading" @click="updateLaunchOptions" style="margin-left:auto") OK
                        
            //- dialog: VRChat Config JSON
            el-dialog.x-dialog(ref="VRChatConfigDialog" :visible.sync="VRChatConfigDialog.visible" title="VRChat Config JSON" width="420px")
                div(style='font-size:12px;word-break:keep-all')
                    | These options are for advanced users only. #[br]
                    | Leave field empty to set as default, game restart required to apply settings.
                br
                span Cache Size:  
                span(v-text="VRChatUsedCacheSize")
                span /
                span(v-text="VRChatTotalCacheSize")
                span GB
                el-tooltip(placement="top")
                    template(#content)
                        span Refresh
                    el-button(type="default" :loading="VRChatCacheSizeLoading" @click="getVRChatCacheSize" size="small" icon="el-icon-refresh" circle style="margin-left:5px")
                el-tooltip(placement="top")
                    template(#content)
                        span Clear Cache
                    el-button(type="default" @click="showDeleteAllVRChatCacheConfirm" :disabled="isGameRunning" size="small" icon="el-icon-delete" circle style="margin-left:5px")
                br
                span Delete all old versions from cache
                el-button(size="small" style="margin-left:5px" icon="el-icon-folder-delete" @click="sweepVRChatCache()") Sweep Cache
                br
                div(style="display:inline-block;margin-top:10px" v-for="(item, value) in VRChatConfigList" :key="value")
                    span(v-text="item.name" style="word-break:keep-all")
                    |:
                    el-input(v-model="VRChatConfigFile[value]" :placeholder="item.default" size="mini" :type="item.type?item.type:'text'" :min="item.min" :max="item.max")
                el-checkbox(v-model="VRChatConfigFile.disableRichPresence" style="margin-top:5px;display:block") Disable Discord Rich Presence
                el-checkbox(v-model="VRChatConfigDialog.cameraRes" style="margin-top:5px") 4K Camera
                el-checkbox(v-model="VRChatConfigDialog.screenshotRes" style="margin-top:5px") 4K Screenshots
                template(#footer)
                    el-button(size="small" @click="openExternalLink('https://docs.vrchat.com/docs/configuration-file')") VRChat Docs
                    el-button(size="small" @click="VRChatConfigDialog.visible = false") Cancel
                    el-button(type="primary" size="small" :disabled="VRChatConfigDialog.loading" @click="SaveVRChatConfigFile") Save
                    
            //- dialog: Cache Download
            el-dialog.x-dialog(ref="downloadDialog" :visible.sync="downloadDialog.visible" title="Download History" width="770px")
                div(v-if="downloadInProgress")
                    span.x-link(v-if="downloadCurrent.ref" @click="showWorldDialog(downloadCurrent.location)" v-text="downloadCurrent.ref.name")
                    el-button(type="text" icon="el-icon-close" size="mini" @click="cancelVRChatCacheDownload(downloadCurrent.id)" style="margin-left:5px")
                    el-progress(:percentage="downloadProgress" :format="downloadProgressText")
                template(v-if="downloadQueueTable.data.length >= 1")
                    span(style="margin-top:15px") Queue:
                    data-tables(v-bind="downloadQueueTable" style="margin-top:10px")
                        el-table-column(label="World Name" prop="name")
                            template(v-once #default="scope")
                                span.x-link(v-text="scope.row.ref.name" @click="showWorldDialog(scope.row.location)")
                        el-table-column(label="User Name" prop="name" width="150")
                            template(v-once #default="scope")
                                span.x-link(v-text="getDisplayName(scope.row.userId)" @click="showUserDialog(scope.row.userId)")
                        el-table-column(label="Type" prop="type" width="70")
                        el-table-column(label="Cancel" width="60" align="right")
                            template(v-once #default="scope")
                                el-button(type="text" icon="el-icon-close" size="mini" @click="cancelVRChatCacheDownload(scope.row.ref.id)")
                span(style="margin-top:15px") History:
                data-tables(v-bind="downloadHistoryTable" style="margin-top:10px")
                    el-table-column(label="Time" prop="date" width="90")
                        template(v-once #default="scope")
                            timer(:epoch="scope.row.date")
                    el-table-column(label="World Name" prop="name")
                        template(v-once #default="scope")
                            span.x-link(v-text="scope.row.ref.name" @click="showWorldDialog(scope.row.location)")
                    el-table-column(label="User Name" prop="name" width="150")
                        template(v-once #default="scope")
                            span.x-link(v-text="getDisplayName(scope.row.userId)" @click="showUserDialog(scope.row.userId)")
                    el-table-column(label="Type" prop="type" width="70")
                    el-table-column(label="Status" prop="status" width="80")
                template(#footer)
                    el-button(v-if="downloadQueue.size >= 1" size="small" @click="cancelAllVRChatCacheDownload") Cancel All
                    el-button(size="small" @click="downloadDialog.visible = false") Close

            //- dialog: launch
            el-dialog.x-dialog(ref="launchDialog" :visible.sync="launchDialog.visible" title="Launch" width="400px")
                div #[span(v-text="launchDialog.url" style="word-break:break-all;font-size:12px")]
                template(#footer)
                    el-checkbox(v-model="launchDialog.desktop" style="float:left;margin-top:5px") Start as Desktop (No VR)
                    el-button(size="small" @click="showInviteDialog(launchDialog.location)") Invite
                    el-button(type="primary" size="small" @click="launchGame(locationToLaunchArg(launchDialog.location))") Launch
                
            //- dialog: export friends list
            el-dialog.x-dialog(:visible.sync="exportFriendsListDialog" title="Export Friends List" width="650px")
                el-input(type="textarea" v-model="exportFriendsListContent" size="mini" rows="15" resize="none" readonly style="margin-top:15px" @click.native="$event.target.tagName === 'TEXTAREA' && $event.target.select()")

            //- dialog: export avatars list
            el-dialog.x-dialog(:visible.sync="exportAvatarsListDialog" title="Export Own Avatars" width="650px")
                el-input(type="textarea" v-model="exportAvatarsListContent" size="mini" rows="15" resize="none" readonly style="margin-top:15px" @click.native="$event.target.tagName === 'TEXTAREA' && $event.target.select()")

            //- dialog: Discord username list
            el-dialog.x-dialog(:visible.sync="discordNamesDialogVisible" title="Discord Names" width="650px")
                div(style='font-size:12px;')
                    | Click load missing entries in the Friends List tab to search entire friends list
                el-input(type="textarea" v-model="discordNamesContent" size="mini" rows="15" resize="none" readonly style="margin-top:15px")

            //- dialog: Notification position
            el-dialog.x-dialog(ref="notificationPositionDialog" :visible.sync="notificationPositionDialog.visible" title="Notification Position" width="400px")
                div(style='font-size:12px;')
                    | Choose a notification position.
                svg(version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 300 200" style="margin-top:15px;" xml:space="preserve")
                    path(style="fill:black;" d="M291.89,5A3.11,3.11,0,0,1,295,8.11V160.64a3.11,3.11,0,0,1-3.11,3.11H8.11A3.11,3.11,0,0,1,5,160.64V8.11A3.11,3.11,0,0,1,8.11,5H291.89m0-5H8.11A8.11,8.11,0,0,0,0,8.11V160.64a8.11,8.11,0,0,0,8.11,8.11H291.89a8.11,8.11,0,0,0,8.11-8.11V8.11A8.11,8.11,0,0,0,291.89,0Z")
                    rect(style="fill:#c4c4c4;" x="5" y="5" width="290" height="158.75" rx="2.5")
                el-radio-group(v-model="notificationPosition" size="mini" @change="changeNotificationPosition")
                    el-radio(label="topLeft" v-model="notificationPosition" style="margin:0;position:absolute;left:35px;top:120px;") â
                    el-radio(label="top" v-model="notificationPosition" style="margin:0;position:absolute;left:195px;top:120px;") â
                    el-radio(label="topRight" v-model="notificationPosition" style="margin:0;position:absolute;right:25px;top:120px;") â
                    el-radio(label="centerLeft" v-model="notificationPosition" style="margin:0;position:absolute;left:35px;top:200px;") â
                    el-radio(label="topCenter" v-model="notificationPosition" style="margin:0;position:absolute;left:195px;top:200px;") â
                    el-radio(label="centerRight" v-model="notificationPosition" style="margin:0;position:absolute;right:25px;top:200px;") â
                    el-radio(label="bottomLeft" v-model="notificationPosition" style="margin:0;position:absolute;left:35px;top:280px;") â
                    el-radio(label="bottom" v-model="notificationPosition" style="margin:0;position:absolute;left:195px;top:280px;") â
                    el-radio(label="bottomRight" v-model="notificationPosition" style="margin:0;position:absolute;right:25px;top:280px;") â
                template(#footer)
                    div(style="display:flex")
                        el-button(type="primary" size="small" style="margin-left:auto" @click="notificationPositionDialog.visible = false") OK

            //- dialog: Noty feed filters
            el-dialog.x-dialog(ref="notyFeedFiltersDialog" :visible.sync="notyFeedFiltersDialog.visible" title="Notification Filters" width="450px")
                div.toggle-list
                    div
                        span.toggle-name OnPlayerJoining
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupOnPlayerJoining" v-model="sharedFeedFilters.noty.OnPlayerJoining" class="toggle-switch")
                    div
                        span.toggle-name OnPlayerJoined
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGroupOnPlayerJoined" v-model="sharedFeedFilters.noty.OnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name OnPlayerLeft
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGroupOnPlayerLeft" v-model="sharedFeedFilters.noty.OnPlayerLeft" class="toggle-switch")
                    div
                        span.toggle-name Online
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupOnline" v-model="sharedFeedFilters.noty.Online" class="toggle-switch")
                    div
                        span.toggle-name Offline
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupOffline" v-model="sharedFeedFilters.noty.Offline" class="toggle-switch")
                    div
                        span.toggle-name GPS
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupGPS" v-model="sharedFeedFilters.noty.GPS" class="toggle-switch")
                    div
                        span.toggle-name Status
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupStatus" v-model="sharedFeedFilters.noty.Status" class="toggle-switch")
                    div
                        span.toggle-name Invite
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupinvite" v-model="sharedFeedFilters.noty.invite" class="toggle-switch")
                    div
                        span.toggle-name Request Invite
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGrouprequestInvite" v-model="sharedFeedFilters.noty.requestInvite" class="toggle-switch")
                    div
                        span.toggle-name Invite Response
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGroupinviteResponse" v-model="sharedFeedFilters.noty.inviteResponse" class="toggle-switch")
                    div
                        span.toggle-name Request Invite Response
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGrouprequestInviteResponse" v-model="sharedFeedFilters.noty.requestInviteResponse" class="toggle-switch")
                    div
                        span.toggle-name Friend Request
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchNotyGrouprequestfriendRequest" v-model="sharedFeedFilters.noty.friendRequest" class="toggle-switch")
                    div
                        span.toggle-name New Friend
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchNotyGrouprequestFriend" v-model="sharedFeedFilters.noty.Friend" class="toggle-switch")
                    div
                        span.toggle-name Unfriend
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchNotyGrouprequestUnfriend" v-model="sharedFeedFilters.noty.Unfriend" class="toggle-switch")
                    div
                        span.toggle-name Display Name
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGrouprequestDisplayName" v-model="sharedFeedFilters.noty.DisplayName" class="toggle-switch")
                    div
                        span.toggle-name Trust Level
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchNotyGrouprequestTrustLevel" v-model="sharedFeedFilters.noty.TrustLevel" class="toggle-switch")
                    div
                        span.toggle-name Portal Spawn
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGrouprequestPortalSpawn" v-model="sharedFeedFilters.noty.PortalSpawn" class="toggle-switch")
                    div
                        span.toggle-name Events
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchNotyGrouprequestEvent" v-model="sharedFeedFilters.noty.Event" class="toggle-switch")
                    div
                        span.toggle-name Video Play
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchNotyGrouprequestVideoPlay" v-model="sharedFeedFilters.noty.VideoPlay" class="toggle-switch")
                    div
                        span.toggle-name Blocked Player Joins
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGrouprequestBlockedOnPlayerJoined" v-model="sharedFeedFilters.noty.BlockedOnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name Blocked Player Leaves
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGrouprequestBlockedOnPlayerLeft" v-model="sharedFeedFilters.noty.BlockedOnPlayerLeft" class="toggle-switch")
                    div
                        span.toggle-name Muted Player Joins
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGrouprequestMutedOnPlayerJoined" v-model="sharedFeedFilters.noty.MutedOnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name Muted Player Leaves
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchNotyGrouprequestMutedOnPlayerLeft" v-model="sharedFeedFilters.noty.MutedOnPlayerLeft" class="toggle-switch")
                template(#footer)
                    el-button(type="small" @click="cancelSharedFeedFilters") Cancel
                    el-button(type="primary" size="small" style="margin-left:10px" @click="saveSharedFeedFilters") Save
                    
            //- dialog: wrist feed filters
            el-dialog.x-dialog(ref="wristFeedFiltersDialog" :visible.sync="wristFeedFiltersDialog.visible" title="Wrist Feed Filters" width="450px")
                div.toggle-list
                    div
                        span.toggle-name Self Location
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGroupLocation" v-model="sharedFeedFilters.wrist.Location" class="toggle-switch")
                    div
                        span.toggle-name OnPlayerJoining
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupOnPlayerJoining" v-model="sharedFeedFilters.wrist.OnPlayerJoining" class="toggle-switch")
                    div
                        span.toggle-name OnPlayerJoined
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGroupOnPlayerJoined" v-model="sharedFeedFilters.wrist.OnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name OnPlayerLeft
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGroupOnPlayerLeft" v-model="sharedFeedFilters.wrist.OnPlayerLeft" class="toggle-switch")
                    div
                        span.toggle-name Online
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupOnline" v-model="sharedFeedFilters.wrist.Online" class="toggle-switch")
                    div
                        span.toggle-name Offline
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupOffline" v-model="sharedFeedFilters.wrist.Offline" class="toggle-switch")
                    div
                        span.toggle-name GPS
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupGPS" v-model="sharedFeedFilters.wrist.GPS" class="toggle-switch")
                    div
                        span.toggle-name Status
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupStatus" v-model="sharedFeedFilters.wrist.Status" class="toggle-switch")
                    div
                        span.toggle-name Invite
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupinvite" v-model="sharedFeedFilters.wrist.invite" class="toggle-switch")
                    div
                        span.toggle-name Request Invite
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGrouprequestInvite" v-model="sharedFeedFilters.wrist.requestInvite" class="toggle-switch")
                    div
                        span.toggle-name Invite Response
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGroupinviteResponse" v-model="sharedFeedFilters.wrist.inviteResponse" class="toggle-switch")
                    div
                        span.toggle-name Request Invite Response
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGrouprequestInviteResponse" v-model="sharedFeedFilters.wrist.requestInviteResponse" class="toggle-switch")
                    div
                        span.toggle-name Friend Request
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGrouprequestfriendRequest" v-model="sharedFeedFilters.wrist.friendRequest" class="toggle-switch")
                    div
                        span.toggle-name New Friend
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGrouprequestFriend" v-model="sharedFeedFilters.wrist.Friend" class="toggle-switch")
                    div
                        span.toggle-name Unfriend
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGrouprequestUnfriend" v-model="sharedFeedFilters.wrist.Unfriend" class="toggle-switch")
                    div
                        span.toggle-name Display Name
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGrouprequestDisplayName" v-model="sharedFeedFilters.wrist.DisplayName" class="toggle-switch")
                    div
                        span.toggle-name Trust Level
                        toggle-switch(:options="toggleSwitchOptionsFriends" group="switchWristGrouprequestTrustLevel" v-model="sharedFeedFilters.wrist.TrustLevel" class="toggle-switch")
                    div
                        span.toggle-name Portal Spawn
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGrouprequestPortalSpawn" v-model="sharedFeedFilters.wrist.PortalSpawn" class="toggle-switch")
                    div
                        span.toggle-name Events
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGrouprequestEvent" v-model="sharedFeedFilters.wrist.Event" class="toggle-switch")
                    div
                        span.toggle-name Video Play
                        toggle-switch(:options="toggleSwitchOptionsOn" group="switchWristGrouprequestVideoPlay" v-model="sharedFeedFilters.wrist.VideoPlay" class="toggle-switch")
                    div
                        span.toggle-name Blocked Player Joins
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGrouprequestBlockedOnPlayerJoined" v-model="sharedFeedFilters.wrist.BlockedOnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name Blocked Player Leaves
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGrouprequestBlockedOnPlayerLeft" v-model="sharedFeedFilters.wrist.BlockedOnPlayerLeft" class="toggle-switch")
                    div
                        span.toggle-name Muted Player Joins
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGrouprequestMutedOnPlayerJoined" v-model="sharedFeedFilters.wrist.MutedOnPlayerJoined" class="toggle-switch")
                    div
                        span.toggle-name Muted Player Leaves
                        toggle-switch(:options="toggleSwitchOptionsEveryone" group="switchWristGrouprequestMutedOnPlayerLeft" v-model="sharedFeedFilters.wrist.MutedOnPlayerLeft" class="toggle-switch")
                template(#footer)
                    el-button(type="small" @click="cancelSharedFeedFilters") Cancel
                    el-button(type="primary" size="small" @click="saveSharedFeedFilters") Save
                    
            //- dialog: Edit Invite Message
            el-dialog.x-dialog(ref="editInviteMessageDialog" :visible.sync="editInviteMessageDialog.visible" title="Edit Invite Message" width="400px")
                div(style='font-size:12px')
                    span 1 hour edit cool down time.
                el-input(type="textarea" v-model="editInviteMessageDialog.newMessage" size="mini" maxlength="64" show-word-limit :autosize="{ minRows:2, maxRows:5 }" placeholder="" style="margin-top:10px")
                template(#footer)
                    el-button(type="small" @click="cancelEditInviteMessage") Cancel
                    el-button(type="primary" size="small" @click="saveEditInviteMessage") Save
                    
            //- dialog: Edit And Send Invite Response Message
            el-dialog.x-dialog(ref="editAndSendInviteResponseDialog" :visible.sync="editAndSendInviteResponseDialog.visible" title="Edit and Send Invite Message" width="400px")
                div(style='font-size:12px')
                    span 1 hour edit cool down time.
                el-input(type="textarea" v-model="editAndSendInviteResponseDialog.newMessage" size="mini" maxlength="64" show-word-limit :autosize="{ minRows:2, maxRows:5 }" placeholder="" style="margin-top:10px")
                template(#footer)
                    el-button(type="small" @click="cancelEditAndSendInviteResponse") Cancel
                    el-button(type="primary" size="small" @click="saveEditAndSendInviteResponse") Send
                    
            //- dialog Table: Send Invite Response Message
            el-dialog.x-dialog(ref="sendInviteResponseDialog" :visible.sync="sendInviteResponseDialogVisible" title="Send Invite Response Message" width="800px")
                template(v-if="API.currentUser.$isVRCPlus")
                    input.inviteImageUploadButton(type="file" accept="image/png" @change="inviteImageUpload")
                data-tables(v-bind="inviteResponseMessageTable" @row-click="showSendInviteResponseConfirmDialog" style="margin-top:10px;cursor:pointer")
                    el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                    el-table-column(label="Message" prop="message")
                    el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                        template(v-once #default="scope")
                            countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                    el-table-column(label="Action" width="60" align="right")
                        template(v-once #default="scope")
                            el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditAndSendInviteResponseDialog('response', scope.row)")
                template(#footer)
                    el-button(type="small" @click="cancelSendInviteResponse") Cancel
                    el-button(type="small" @click="API.refreshInviteMessageTableData('response')") Refresh
                    
            //- dialog Table: Send Invite Request Response Message
            el-dialog.x-dialog(ref="sendInviteRequestResponseDialog" :visible.sync="sendInviteRequestResponseDialogVisible" title="Send Invite Request Response Message" width="800px")
                template(v-if="API.currentUser.$isVRCPlus")
                    input.inviteImageUploadButton(type="file" accept="image/png" @change="inviteImageUpload")
                data-tables(v-bind="inviteRequestResponseMessageTable" @row-click="showSendInviteResponseConfirmDialog" style="margin-top:10px;cursor:pointer")
                    el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                    el-table-column(label="Message" prop="message")
                    el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                        template(v-once #default="scope")
                            countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                    el-table-column(label="Action" width="60" align="right")
                        template(v-once #default="scope")
                            el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditAndSendInviteResponseDialog('requestResponse', scope.row)")
                template(#footer)
                    el-button(type="small" @click="cancelSendInviteRequestResponse") Cancel
                    el-button(type="small" @click="API.refreshInviteMessageTableData('requestResponse')") Refresh

            //- dialog: Send Invite Response Message Confirm
            el-dialog.x-dialog(ref="sendInviteResponseConfirmDialog" :visible.sync="sendInviteResponseConfirmDialog.visible" title="Send Invite Response Message" width="400px")
                div(style='font-size:12px')
                    span Are you sure you want to send?
                template(#footer)
                    el-button(type="small" @click="cancelInviteResponseConfirm") Cancel
                    el-button(type="primary" size="small" @click="sendInviteResponseConfirm") Confirm
                    
            //- dialog Table: Send Invite Message
            el-dialog.x-dialog(ref="sendInviteDialog" :visible.sync="sendInviteDialogVisible" title="Send Invite Message" width="800px")
                template(v-if="API.currentUser.$isVRCPlus")
                    input.inviteImageUploadButton(type="file" accept="image/png" @change="inviteImageUpload")
                data-tables(v-bind="inviteMessageTable" @row-click="showSendInviteConfirmDialog" style="margin-top:10px;cursor:pointer")
                    el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                    el-table-column(label="Message" prop="message")
                    el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                        template(v-once #default="scope")
                            countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                    el-table-column(label="Action" width="60" align="right")
                        template(v-once #default="scope")
                            el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditAndSendInviteDialog('message', scope.row)")
                template(#footer)
                    el-button(type="small" @click="cancelSendInvite") Cancel
                    el-button(type="small" @click="API.refreshInviteMessageTableData('message')") Refresh
                    
            //- dialog Table: Send Invite Request Message
            el-dialog.x-dialog(ref="sendInviteRequestDialog" :visible.sync="sendInviteRequestDialogVisible" title="Send Invite Request Message" width="800px")
                template(v-if="API.currentUser.$isVRCPlus")
                    input.inviteImageUploadButton(type="file" accept="image/png" @change="inviteImageUpload")
                data-tables(v-bind="inviteRequestMessageTable" @row-click="showSendInviteConfirmDialog" style="margin-top:10px;cursor:pointer")
                    el-table-column(label="Slot" prop="slot" sortable="custom" width="70")
                    el-table-column(label="Message" prop="message")
                    el-table-column(label="Cool Down" prop="updatedAt" sortable="custom" width="110" align="right")
                        template(v-once #default="scope")
                            countdown-timer(:datetime="scope.row.updatedAt" :hours="1")
                    el-table-column(label="Action" width="60" align="right")
                        template(v-once #default="scope")
                            el-button(type="text" icon="el-icon-edit" size="mini" @click="showEditAndSendInviteDialog('request', scope.row)")
                template(#footer)
                    el-button(type="small" @click="cancelSendInviteRequest") Cancel
                    el-button(type="small" @click="API.refreshInviteMessageTableData('request')") Refresh
                    
            //- dialog: Send Invite Message Confirm
            el-dialog.x-dialog(ref="sendInviteConfirmDialog" :visible.sync="sendInviteConfirmDialog.visible" title="Send Invite Message" width="400px")
                div(style='font-size:12px')
                    span Are you sure you want to send?
                template(#footer)
                    el-button(type="small" @click="cancelInviteConfirm") Cancel
                    el-button(type="primary" size="small" @click="sendInviteConfirm") Confirm
                    
            //- dialog: Edit And Send Invite Message
            el-dialog.x-dialog(ref="editAndSendInviteDialog" :visible.sync="editAndSendInviteDialog.visible" title="Edit and Send Invite Message" width="400px")
                div(style='font-size:12px')
                    span 1 hour edit cool down time.
                el-input(type="textarea" v-model="editAndSendInviteDialog.newMessage" size="mini" maxlength="64" show-word-limit :autosize="{ minRows:2, maxRows:5 }" placeholder="" style="margin-top:10px")
                template(#footer)
                    el-button(type="small" @click="cancelEditAndSendInvite") Cancel
                    el-button(type="primary" size="small" @click="saveEditAndSendInvite") Send
                    
            //- dialog: Change avatar image
            el-dialog.x-dialog(ref="changeAvatarImageDialog" :visible.sync="changeAvatarImageDialogVisible" title="Change Avatar Image" width="800px")
                div(v-loading="changeAvatarImageDialogLoading")
                    div(style="display:inline-block" v-for="image in previousImagesTable" :key="image.version" v-if="image.file")
                        .x-change-image-item(@click="setAvatarImage(image)" style="cursor:pointer" :class="{ 'current-image': compareCurrentImage(image) }")
                            img.image(v-lazy="image.file.url")
                            
            //- dialog: Change world image
            el-dialog.x-dialog(ref="changeWorldImageDialog" :visible.sync="changeWorldImageDialogVisible" title="Change World Image" width="800px")
                div(v-loading="changeWorldImageDialogLoading")
                    div(style="display:inline-block" v-for="image in previousImagesTable" :key="image.version" v-if="image.file")
                        .x-change-image-item(@click="setWorldImage(image)" style="cursor:pointer" :class="{ 'current-image': compareCurrentImage(image) }")
                            img.image(v-lazy="image.file.url")
                            
            //- dialog: Display previous avatar/world images
            el-dialog.x-dialog(ref="previousImagesDialog" :visible.sync="previousImagesDialogVisible" title="Previous Images" width="800px")
                div
                    div(style="display:inline-block" v-for="image in previousImagesTable" :key="image.version" v-if="image.file")
                        el-popover.x-change-image-item(placement="right" width="500px" trigger="click")
                            img.x-link(slot="reference" v-lazy="image.file.url")
                            img.x-link(v-lazy="image.file.url" style="width:500px;height:375px" @click="openExternalLink(image.file.url)")
                            
            //- dialog: Gallery/VRCPlusIcons
            el-dialog.x-dialog(ref="galleryDialog" :visible.sync="galleryDialogVisible" title="Gallery and Icons" width="100%")
                el-tabs(type="card")
                    el-tab-pane(v-loading="galleryDialogGalleryLoading")
                        span(slot="label") Gallery
                            span(style="color:#909399;font-size:12px;margin-left:5px") {{ galleryTable.length }}/64
                        input(type="file" accept="image/*" @change="onFileChangeGallery" id="GalleryUploadButton" style="display:none")
                        el-button-group
                            el-button(type="default" size="small" @click="refreshGalleryTable" icon="el-icon-refresh") Refresh
                            el-button(type="default" size="small" @click="displayGalleryUpload" icon="el-icon-upload2" :disabled="!API.currentUser.$isVRCPlus") Upload
                            el-button(type="default" size="small" @click="setProfilePicOverride('')" icon="el-icon-close" :disabled="!API.currentUser.profilePicOverride") Clear
                        br
                        .x-friend-item(v-for="image in galleryTable" :key="image.id" style="display:inline-block;margin-top:10px;width:unset;cursor:default")
                            .vrcplus-icon(v-if="image.versions[1].file.url" @click="setProfilePicOverride(image.id)" :class="{ 'current-vrcplus-icon': compareCurrentProfilePic(image.id) }")
                                img.avatar(v-lazy="image.versions[1].file.url")
                            div(style="float:right;margin-top:5px")
                                el-button(type="default" @click="openExternalLink(image.versions[1].file.url)" size="mini" icon="el-icon-paperclip" circle)
                                el-button(type="default" @click="deleteGalleryImage(image.id)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")
                    el-tab-pane(v-loading="galleryDialogIconsLoading")
                        span(slot="label") Icons
                            span(style="color:#909399;font-size:12px;margin-left:5px") {{ VRCPlusIconsTable.length }}/64
                        input(type="file" accept="image/*" @change="onFileChangeVRCPlusIcon" id="VRCPlusIconUploadButton" style="display:none")
                        el-button-group
                            el-button(type="default" size="small" @click="refreshVRCPlusIconsTable" icon="el-icon-refresh") Refresh
                            el-button(type="default" size="small" @click="displayVRCPlusIconUpload" icon="el-icon-upload2" :disabled="!API.currentUser.$isVRCPlus") Upload
                            el-button(type="default" size="small" @click="setVRCPlusIcon('')" icon="el-icon-close" :disabled="!API.currentUser.userIcon") Clear
                        br
                        .x-friend-item(v-for="image in VRCPlusIconsTable" :key="image.id" style="display:inline-block;margin-top:10px;width:unset;cursor:default")
                            .vrcplus-icon(v-if="image.versions[1].file.url" @click="setVRCPlusIcon(image.id)" :class="{ 'current-vrcplus-icon': compareCurrentVRCPlusIcon(image.id) }")
                                img.avatar(v-lazy="image.versions[1].file.url")
                            div(style="float:right;margin-top:5px")
                                el-button(type="default" @click="openExternalLink(image.versions[1].file.url)" size="mini" icon="el-icon-paperclip" circle)
                                el-button(type="default" @click="deleteVRCPlusIcon(image.id)" size="mini" icon="el-icon-delete" circle style="margin-left:5px")

            //- dialog: open source software notice
            el-dialog.x-dialog(:visible.sync="ossDialog" title="Open Source Software Notice" width="650px")
                div(style="height:350px;overflow:hidden scroll;word-break:break-all")
                    div
                        span VRCX is based on open source software. It was possible because of their contribution.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") animate.css
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2019 Daniel Eden
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") CefSharp
                        pre(style="font-size:12px;white-space:pre-line").
                            // Copyright Â© The CefSharp Authors. All rights reserved.
                            //
                            // Redistribution and use in source and binary forms, with or without
                            // modification, are permitted provided that the following conditions are
                            // met:
                            //
                            //    * Redistributions of source code must retain the above copyright
                            //      notice, this list of conditions and the following disclaimer.
                            //
                            //    * Redistributions in binary form must reproduce the above
                            //      copyright notice, this list of conditions and the following disclaimer
                            //      in the documentation and/or other materials provided with the
                            //      distribution.
                            //
                            //    * Neither the name of Google Inc. nor the name Chromium Embedded
                            //      Framework nor the name CefSharp nor the names of its contributors
                            //      may be used to endorse or promote products derived from this software
                            //      without specific prior written permission.
                            //
                            // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
                            // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
                            // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
                            // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
                            // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
                            // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
                            // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                            // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                            // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                            // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") DiscordRichPresence
                        pre(style="font-size:12px;white-space:pre-line").
                            MIT License
                            
                            Copyright (c) 2018 Lachee
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") element
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2016-present ElemeFE
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") librsync.net
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2015 Brad Dodson
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") Newtonsoft.Json
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2007 James Newton-King
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") normalize
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright Â© Nicolas Gallagher and Jonathan Neal
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") noty
                        pre(style="font-size:12px;white-space:pre-line").
                            Copyright (c) 2012 Nedim ArabacÄ±
                            
                            Permission is hereby granted, free of charge, to any person obtaining
                            a copy of this software and associated documentation files (the
                            "Software"), to deal in the Software without restriction, including
                            without limitation the rights to use, copy, modify, merge, publish,
                            distribute, sublicense, and/or sell copies of the Software, and to
                            permit persons to whom the Software is furnished to do so, subject to
                            the following conditions:
                            
                            The above copyright notice and this permission notice shall be
                            included in all copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
                            EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                            MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
                            NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
                            LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
                            OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                            WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") OpenVR SDK
                        pre(style="font-size:12px;white-space:pre-line").
                            Copyright (c) 2015, Valve Corporation
                            All rights reserved.
                            
                            Redistribution and use in source and binary forms, with or without modification,
                            are permitted provided that the following conditions are met:
                            
                            1. Redistributions of source code must retain the above copyright notice, this
                            list of conditions and the following disclaimer.
                            
                            2. Redistributions in binary form must reproduce the above copyright notice,
                            this list of conditions and the following disclaimer in the documentation and/or
                            other materials provided with the distribution.
                            
                            3. Neither the name of the copyright holder nor the names of its contributors
                            may be used to endorse or promote products derived from this software without
                            specific prior written permission.
                            
                            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                            ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                            WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                            ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                            (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                            ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                            (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                            SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") SharpDX
                        pre(style="font-size:12px;white-space:pre-line").
                            Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in
                            all copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
                            THE SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") vue
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2013-present, Yuxi (Evan) You
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in
                            all copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
                            THE SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") vue-data-tables
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2018 Leon Zhang
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") vue-lazyload
                        pre(style="font-size:12px;white-space:pre-line").
                            The MIT License (MIT)
                            
                            Copyright (c) 2016 Awe
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") vue-swatches
                        pre(style="font-size:12px;white-space:pre-line").
                            MIT License
                            
                            Copyright (c) 2018 - Present Diego Jara
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
                    div(style="margin-top:15px")
                        p(style="font-weight:bold") vuejs-toggle-switch
                        pre(style="font-size:12px;white-space:pre-line").
                            MIT License
                            
                            Copyright (c) 2018 Lars-Martin Hejll
                            
                            Permission is hereby granted, free of charge, to any person obtaining a copy
                            of this software and associated documentation files (the "Software"), to deal
                            in the Software without restriction, including without limitation the rights
                            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            copies of the Software, and to permit persons to whom the Software is
                            furnished to do so, subject to the following conditions:
                            
                            The above copyright notice and this permission notice shall be included in all
                            copies or substantial portions of the Software.
                            
                            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            SOFTWARE.
            
            //- dialog: Enable primary password
            el-dialog.x-dialog(
                :visible.sync="enablePrimaryPasswordDialog.visible"
                :before-close="enablePrimaryPasswordDialog.beforeClose"
                ref="primaryPasswordDialog"
                :close-on-click-modal="false"
                title="Primary Password Required"
                width="400px"
            )
                el-input(
                    v-model="enablePrimaryPasswordDialog.password"
                    placeholder="Input new password"
                    type="password"
                    size="mini"
                    maxlength="32"
                    show-password
                    autofocus
                )
                el-input(
                    v-model="enablePrimaryPasswordDialog.rePassword"
                    placeholder="Re-input password"
                    type="password"
                    style="margin-top:5px"
                    size="mini"
                    maxlength="32"
                    show-password
                )
                template(#footer)
                    el-button(
                        type="primary" size="small" @click="setPrimaryPassword"
                        :disabled="enablePrimaryPasswordDialog.password.length===0||enablePrimaryPasswordDialog.password!==enablePrimaryPasswordDialog.rePassword"
                    ) OK
        script(src="app.js")
